import asyncio
import logging
from datetime import datetime, time, timedelta
from typing import Optional
from aiogram import Bot
from sqlalchemy import select, and_
import re

from database.models import User, CheckIn
from database.connection import get_session
from bot.keyboards.checkin import get_checkin_reminder_keyboard

logger = logging.getLogger(__name__)

class SmartReminderService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.running = False
        self.task = None

    async def start(self):
        if self.running:
            return
        self.running = True
        self.task = asyncio.create_task(self.reminder_loop())
        logger.info("–°–µ—Ä–≤–∏—Å —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        self.running = False
        if self.task:
            self.task.cancel()
        logger.info("–°–µ—Ä–≤–∏—Å —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _get_timezone_offset(self, tz_string: str) -> timedelta:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ (–Ω–∞–ø—Ä. 'UTC+3') –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ."""
        if tz_string == "UTC":
            return timedelta(hours=0)
        
        match = re.match(r"UTC([+-])(\d+)", tz_string)
        if match:
            sign = 1 if match.group(1) == '+' else -1
            hours = int(match.group(2))
            return timedelta(hours=sign * hours)
        
        return timedelta(hours=0) # Fallback to UTC

    async def reminder_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        while self.running:
            try:
                now_utc = datetime.utcnow()
                
                async with get_session() as session:
                    result = await session.execute(
                        select(User).where(
                            User.is_active == True,
                            User.onboarding_completed == True
                        )
                    )
                    users = result.scalars().all()

                for user in users:
                    await self.check_and_send_reminders(user, now_utc, session)

                # –ñ–¥–µ–º –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(60 - now_utc.second)

            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
                await asyncio.sleep(60)

    async def check_and_send_reminders(self, user: User, now_utc: datetime, session: 'AsyncSession'):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        settings = user.reminder_settings or {}
        if settings.get("all_disabled", False):
            return

        offset = self._get_timezone_offset(user.timezone or "UTC")
        user_local_time = now_utc + offset

        today_start = datetime.combine(user_local_time.date(), time.min) - offset
        today_end = datetime.combine(user_local_time.date(), time.max) - offset

        # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        morning_time_str = settings.get("morning_time", "08:00")
        try:
            morning_t = datetime.strptime(morning_time_str, "%H:%M").time()
            if morning_t.hour == user_local_time.hour and morning_t.minute == user_local_time.minute:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
                checkin = await session.scalar(
                    select(CheckIn).where(
                        and_(CheckIn.user_id == user.id, CheckIn.date.between(today_start, today_end))
                    )
                )
                if not checkin or checkin.weight is None:
                    await self.send_reminder(user, 'morning')
        except Exception as e:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è user {user.id}: {e}")

        # –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        evening_time_str = settings.get("evening_time", "20:00")
        try:
            evening_t = datetime.strptime(evening_time_str, "%H:%M").time()
            if evening_t.hour == user_local_time.hour and evening_t.minute == user_local_time.minute:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω
                checkin = await session.scalar(
                    select(CheckIn).where(
                        and_(CheckIn.user_id == user.id, CheckIn.date.between(today_start, today_end))
                    )
                )
                if not checkin or checkin.steps is None:
                    await self.send_reminder(user, 'evening')
        except Exception as e:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—á–µ—Ä–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è user {user.id}: {e}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ
        if settings.get("water_reminders", True):
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ 10, 14, 18 —á–∞—Å–æ–≤
            water_reminder_hours = [10, 14, 18]
            if user_local_time.hour in water_reminder_hours and user_local_time.minute == 0:
                 checkin = await session.scalar(
                    select(CheckIn).where(
                        and_(CheckIn.user_id == user.id, CheckIn.date.between(today_start, today_end))
                    )
                )
                 current_water = checkin.water_ml if checkin and checkin.water_ml else 0
                 if current_water < 2000:
                     await self.send_reminder(user, 'water', current_water)


    async def send_reminder(self, user: User, reminder_type: str, water_level: int = 0):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        style = user.reminder_style or 'friendly'
        
        # –¢–µ–∫—Å—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        morning_texts = {
            'friendly': "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω: –≤–∑–≤–µ—Å–∏—Ç—å—Å—è –∏ –æ—Ü–µ–Ω–∏—Ç—å —Å–æ–Ω.",
            'motivational': "üî• –ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–π —à–∞–≥ –∫ —Ü–µ–ª–∏! –í—Ä–µ–º—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞!",
            'strict': "üìä –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω: –≤–µ—Å, —Å–æ–Ω."
        }
        evening_texts = {
            'friendly': "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –ó–∞–ø–∏—à–∏ —à–∞–≥–∏ –∏ –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É.",
            'motivational': "üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è! –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π —Å–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–µ—á–µ—Ä–Ω–µ–º —á–µ–∫-–∏–Ω–µ.",
            'strict': "üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω: —à–∞–≥–∏, –≤–æ–¥–∞, –∑–∞–º–µ—Ç–∫–∏."
        }
        
        text = ""
        if reminder_type == 'morning':
            text = morning_texts.get(style, morning_texts['friendly'])
        elif reminder_type == 'evening':
            text = evening_texts.get(style, evening_texts['friendly'])
        elif reminder_type == 'water':
            text = f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ! –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {water_level/1000:.1f}–ª. –ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!"

        try:
            keyboard = get_checkin_reminder_keyboard() if reminder_type != 'water' else None
            await self.bot.send_message(
                user.telegram_id,
                text,
                reply_markup=keyboard
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '{reminder_type}' –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user.telegram_id}: {e}")