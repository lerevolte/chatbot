import random
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from sqlalchemy import select, and_, func

from database.models import User, CheckIn, Goal
from database.connection import get_session

logger = logging.getLogger(__name__)

class MotivationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.quotes = {
            Goal.LOSE_WEIGHT: [
                "–ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏! üö∂‚Äç‚ôÄÔ∏è",
                "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
                "–†–µ–∑—É–ª—å—Ç–∞—Ç = –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ √ó –≤—Ä–µ–º—è ‚è∞",
                "–¢–≤–æ–µ —Ç–µ–ª–æ - —ç—Ç–æ –ø—Ä–æ–µ–∫—Ç, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å üèó",
                "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –°–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ–µ —É–∂–µ –ø–æ–∑–∞–¥–∏ üéØ",
                "–ü—Ä–æ–≥—Ä–µ—Å—Å, –∞ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ! üìà",
                "–¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª {progress}% –ø—É—Ç–∏! üõ§",
                "–ú–∏–Ω—É—Å {lost_weight} –∫–≥ - —ç—Ç–æ —Ç–≤–æ—è –ø–æ–±–µ–¥–∞! üèÜ",
                "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è ‚ú®",
                "–ü–æ–º–Ω–∏, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª —ç—Ç–æ—Ç –ø—É—Ç—å üéØ"
            ],
            Goal.GAIN_MUSCLE: [
                "–ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç, –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–¥—ã—Ö–∞–µ—à—å! üò¥",
                "–°–∏–ª–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑–Ω—É—Ç—Ä–∏! üí™",
                "–ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–µ–±—è üìà",
                "–¢—ã —Å—Ç—Ä–æ–∏—à—å –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–ª–æ, –∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä! üèó",
                "–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Å–æ–º! üìä",
                "–ü–∏—Ç–∞–Ω–∏–µ - —ç—Ç–æ 70% —É—Å–ø–µ—Ö–∞! üçΩ",
                "–ü–ª—é—Å {gained_weight} –∫–≥ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞—Å—Å—ã! üí™",
                "–¢—ã –Ω–∞ {progress}% –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏! üéØ",
                "–¢–µ—Ä–ø–µ–Ω–∏–µ –∏ —Ç—Ä—É–¥ - —Ç–≤–æ–∏ –ª—É—á—à–∏–µ –¥—Ä—É–∑—å—è ü§ù",
                "–°–∏–ª—å–Ω–æ–µ —Ç–µ–ª–æ = —Å–∏–ª—å–Ω—ã–π –¥—É—Ö! üß†"
            ],
            Goal.MAINTAIN: [
                "–ë–∞–ª–∞–Ω—Å - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ! ‚öñÔ∏è",
                "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏–∑–Ω–∞–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞! üéØ",
                "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –¥–µ—Ä–∂–∏—à—å —Ñ–æ—Ä–º—É! üëè",
                "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - —ç—Ç–æ —Ç–æ–∂–µ –ø–æ–±–µ–¥–∞! üèÜ",
                "–ó–¥–æ—Ä–æ–≤—å–µ - —ç—Ç–æ –º–∞—Ä–∞—Ñ–æ–Ω, –Ω–µ —Å–ø—Ä–∏–Ω—Ç üèÉ‚Äç‚ôÇÔ∏è",
                "–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å! üåü",
                "Consistency is key! üîë",
                "–¢–≤–æ–π –≤–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω —É–∂–µ {stable_days} –¥–Ω–µ–π! üìä",
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
                "–¢—ã - –ø—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è! ‚≠ê"
            ]
        }
        
        self.achievements = {
            "first_checkin": {"emoji": "üéØ", "text": "–ü–µ—Ä–≤—ã–π —á–µ–∫-–∏–Ω"},
            "week_streak": {"emoji": "üî•", "text": "–ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤"},
            "month_streak": {"emoji": "‚≠ê", "text": "–ú–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"},
            "weight_milestone_5": {"emoji": "üèÖ", "text": "–ú–∏–Ω—É—Å 5 –∫–≥"},
            "weight_milestone_10": {"emoji": "üèÜ", "text": "–ú–∏–Ω—É—Å 10 –∫–≥"},
            "steps_10k": {"emoji": "üëü", "text": "10 000 —à–∞–≥–æ–≤"},
            "water_goal": {"emoji": "üíß", "text": "–ù–æ—Ä–º–∞ –≤–æ–¥—ã 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥"},
            "photo_streak": {"emoji": "üì∏", "text": "–§–æ—Ç–æ –µ–¥—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"},
            "perfect_week": {"emoji": "üíØ", "text": "–ò–¥–µ–∞–ª—å–Ω–∞—è –Ω–µ–¥–µ–ª—è"},
            "plateau_breakthrough": {"emoji": "üöÄ", "text": "–ü—Ä–æ—Ä—ã–≤ –ø–ª–∞—Ç–æ"}
        }
        
        self.tips = {
            "morning": [
                "üí° –ù–∞—á–Ω–∏ –¥–µ–Ω—å —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã —Å –ª–∏–º–æ–Ω–æ–º",
                "üí° –°–¥–µ–ª–∞–π 10 –º–∏–Ω—É—Ç –∑–∞—Ä—è–¥–∫–∏ –¥–ª—è –±–æ–¥—Ä–æ—Å—Ç–∏",
                "üí° –í–∑–≤–µ—à–∏–≤–∞–π—Å—è –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è",
                "üí° –°—ä–µ—à—å –±–µ–ª–∫–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è",
                "üí° –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–∞ –¥–µ–Ω—å"
            ],
            "afternoon": [
                "üí° –í—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! –î–æ–±–∞–≤—å 2000 —à–∞–≥–æ–≤",
                "üí° –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –ø–µ—Ä–µ–∫—É—Å —Å –±–µ–ª–∫–æ–º",
                "üí° –í—ã–ø–µ–π 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
                "üí° –°–¥–µ–ª–∞–π 5-–º–∏–Ω—É—Ç–Ω—É—é —Ä–∞—Å—Ç—è–∂–∫—É",
                "üí° –ü—Ä–æ–≤–µ—Ä—å, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç—ã —Å—ä–µ–ª –±–µ–ª–∫–∞"
            ],
            "evening": [
                "üí° –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞",
                "üí° –ü–æ–¥–≥–æ—Ç–æ–≤—å –æ–¥–µ–∂–¥—É –¥–ª—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "üí° –ó–∞–ø–∏—à–∏ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω —Å–µ–≥–æ–¥–Ω—è",
                "üí° –í—ã–∫–ª—é—á–∏ —ç–∫—Ä–∞–Ω—ã –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞",
                "üí° –í—ã–ø–µ–π —Ç—Ä–∞–≤—è–Ω–æ–π —á–∞–π –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è"
            ]
        }
        
        self.challenges = {
            "beginner": [
                {"name": "–í–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç", "task": "–í—ã–ø–∏–≤–∞—Ç—å 2–ª –≤–æ–¥—ã 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥", "reward": "üèÖ"},
                {"name": "–®–∞–≥–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", "task": "8000 —à–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏", "reward": "üèÉ‚Äç‚ôÇÔ∏è"},
                {"name": "–§–æ—Ç–æ-–¥–Ω–µ–≤–Ω–∏–∫", "task": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ 3 –¥–Ω—è", "reward": "üì∏"},
                {"name": "–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞", "task": "–ó–∞–≤—Ç—Ä–∞–∫ –¥–æ 9:00 –≤—Å—é –Ω–µ–¥–µ–ª—é", "reward": "üåÖ"},
                {"name": "–ë–µ–ª–∫–æ–≤—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "task": "–î–æ—Å—Ç–∏—á—å –Ω–æ—Ä–º—ã –±–µ–ª–∫–∞ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "reward": "üí™"}
            ],
            "intermediate": [
                {"name": "10K —á–µ–ª–ª–µ–Ω–¥–∂", "task": "10 000 —à–∞–≥–æ–≤ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥", "reward": "üéØ"},
                {"name": "–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞", "task": "3 –¥–Ω—è –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞", "reward": "üçØ"},
                {"name": "HIIT –Ω–µ–¥–µ–ª—è", "task": "3 HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é", "reward": "üî•"},
                {"name": "Meal prep Sunday", "task": "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –µ–¥—É –Ω–∞ 3 –¥–Ω—è –≤–ø–µ—Ä–µ–¥", "reward": "üç±"},
                {"name": "–°–ø—è—â–∞—è –∫—Ä–∞—Å–∞–≤–∏—Ü–∞", "task": "8 —á–∞—Å–æ–≤ —Å–Ω–∞ 5 –Ω–æ—á–µ–π –ø–æ–¥—Ä—è–¥", "reward": "üò¥"}
            ],
            "advanced": [
                {"name": "–ñ–µ–ª–µ–∑–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", "task": "–ú–µ—Å—è—Ü –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —á–µ–∫-–∏–Ω–æ–≤", "reward": "üëë"},
                {"name": "–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü", "task": "100 000 —à–∞–≥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é", "reward": "üèÉ‚Äç‚ôÄÔ∏è"},
                {"name": "–ß–∏—Å—Ç–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "task": "–ù–µ–¥–µ–ª—è –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –ø–∏—â–∏", "reward": "ü•ó"},
                {"name": "–°–∏–ª–æ–≤–æ–π –º–µ—Å—è—Ü", "task": "12 —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü", "reward": "üí™"},
                {"name": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "task": "–î–æ—Å—Ç–∏—á—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ü–µ–ª–∏ –≤–µ—Å–∞", "reward": "ü¶ã"}
            ]
        }
    
    async def get_daily_motivation(self, user_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –¥–µ–Ω—å"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                return {"success": False}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._get_user_stats(user.id)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–∏—Ç–∞—Ç—É
            quotes_pool = self.quotes.get(user.goal, self.quotes[Goal.MAINTAIN])
            quote = random.choice(quotes_pool)
            
            # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            quote = quote.format(
                progress=stats.get('progress_percent', 0),
                lost_weight=abs(stats.get('weight_change', 0)),
                gained_weight=abs(stats.get('weight_change', 0)),
                stable_days=stats.get('stable_days', 0)
            )
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–≤–µ—Ç –¥–Ω—è
            hour = datetime.now().hour
            if hour < 12:
                tip = random.choice(self.tips['morning'])
            elif hour < 18:
                tip = random.choice(self.tips['afternoon'])
            else:
                tip = random.choice(self.tips['evening'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            new_achievements = await self._check_achievements(user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
            active_challenge = await self._get_active_challenge(user.id)
            
            return {
                "success": True,
                "quote": quote,
                "tip": tip,
                "achievements": new_achievements,
                "challenge": active_challenge,
                "streak": stats.get('streak_days', 0),
                "stats": stats
            }
    
    async def _get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫-–∏–Ω—ã
            result = await session.execute(
                select(CheckIn).where(
                    CheckIn.user_id == user_id
                ).order_by(CheckIn.date)
            )
            all_checkins = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.id == user_id)
            )
            user = result.scalar_one_or_none()
            
            stats = {
                'total_checkins': len(all_checkins),
                'streak_days': 0,
                'weight_change': 0,
                'progress_percent': 0,
                'stable_days': 0,
                'avg_steps': 0,
                'avg_water': 0
            }
            
            if all_checkins:
                # –ü–æ–¥—Å—á–µ—Ç streak
                today = datetime.now().date()
                streak = 0
                for i in range(len(all_checkins) - 1, -1, -1):
                    checkin_date = all_checkins[i].date.date()
                    expected_date = today - timedelta(days=streak)
                    if checkin_date == expected_date:
                        streak += 1
                    else:
                        break
                stats['streak_days'] = streak
                
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
                weights = [c.weight for c in all_checkins if c.weight]
                if len(weights) >= 2:
                    stats['weight_change'] = weights[-1] - weights[0]
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
                    if user and user.target_weight:
                        total_to_change = abs(user.target_weight - weights[0])
                        changed = abs(weights[-1] - weights[0])
                        stats['progress_percent'] = int((changed / total_to_change * 100)) if total_to_change > 0 else 0
                
                # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                week_checkins = all_checkins[-7:] if len(all_checkins) >= 7 else all_checkins
                steps = [c.steps for c in week_checkins if c.steps]
                water = [c.water_ml for c in week_checkins if c.water_ml]
                
                if steps:
                    stats['avg_steps'] = int(sum(steps) / len(steps))
                if water:
                    stats['avg_water'] = int(sum(water) / len(water))
            
            return stats
    
    async def _check_achievements(self, user_id: int) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        new_achievements = []
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self._get_user_stats(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if stats['total_checkins'] == 1:
                new_achievements.append(self.achievements['first_checkin'])
            
            if stats['streak_days'] == 7:
                new_achievements.append(self.achievements['week_streak'])
            
            if stats['streak_days'] == 30:
                new_achievements.append(self.achievements['month_streak'])
            
            if stats['weight_change'] <= -5:
                new_achievements.append(self.achievements['weight_milestone_5'])
            
            if stats['weight_change'] <= -10:
                new_achievements.append(self.achievements['weight_milestone_10'])
            
            if stats['avg_steps'] >= 10000:
                new_achievements.append(self.achievements['steps_10k'])
            
            if stats['avg_water'] >= 2000:
                new_achievements.append(self.achievements['water_goal'])
        
        return new_achievements
    
    async def _get_active_challenge(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = await self._get_user_stats(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if stats['total_checkins'] < 7:
            level = "beginner"
        elif stats['total_checkins'] < 30:
            level = "intermediate"
        else:
            level = "advanced"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂
        challenges = self.challenges[level]
        challenge = random.choice(challenges)
        
        return challenge
    
    async def generate_weekly_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now() - timedelta(days=7)
            result = await session.execute(
                select(CheckIn).where(
                    and_(
                        CheckIn.user_id == user_id,
                        CheckIn.date >= week_ago
                    )
                ).order_by(CheckIn.date)
            )
            week_checkins = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()
            
            if not week_checkins:
                return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–µ–ª—é
            weights = [c.weight for c in week_checkins if c.weight]
            steps = [c.steps for c in week_checkins if c.steps]
            water = [c.water_ml for c in week_checkins if c.water_ml]
            sleep = [c.sleep_hours for c in week_checkins if c.sleep_hours]
            
            report = "üìä **–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢**\n"
            report += f"_–ü–µ—Ä–∏–æ–¥: {week_ago.strftime('%d.%m')} - {datetime.now().strftime('%d.%m')}_\n\n"
            
            # –í–µ—Å
            if len(weights) >= 2:
                weight_change = weights[-1] - weights[0]
                emoji = "üìâ" if weight_change < 0 else "üìà" if weight_change > 0 else "‚û°Ô∏è"
                report += f"{emoji} **–í–µ—Å:** {weight_change:+.1f} –∫–≥\n"
                report += f"   {weights[0]:.1f} ‚Üí {weights[-1]:.1f} –∫–≥\n\n"
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if steps:
                avg_steps = sum(steps) / len(steps)
                total_steps = sum(steps)
                report += f"üëü **–®–∞–≥–∏:** {total_steps:,} –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                report += f"   –í —Å—Ä–µ–¥–Ω–µ–º: {avg_steps:,.0f}/–¥–µ–Ω—å\n"
                if avg_steps >= 10000:
                    report += "   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
                elif avg_steps >= 8000:
                    report += "   ‚ö†Ô∏è –•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ\n\n"
                else:
                    report += "   ‚ùå –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–≤–∏–≥–∞—Ç—å—Å—è\n\n"
            
            # –í–æ–¥–∞
            if water:
                avg_water = sum(water) / len(water) / 1000
                report += f"üíß **–í–æ–¥–∞:** {avg_water:.1f}–ª –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                if avg_water >= 2:
                    report += "   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—è!\n\n"
                else:
                    report += f"   ‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ {2-avg_water:.1f}–ª\n\n"
            
            # –°–æ–Ω
            if sleep:
                avg_sleep = sum(sleep) / len(sleep)
                report += f"üò¥ **–°–æ–Ω:** {avg_sleep:.1f}—á –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
                if 7 <= avg_sleep <= 9:
                    report += "   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ!\n\n"
                else:
                    report += "   ‚ö†Ô∏è –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 7-9 —á–∞—Å–æ–≤\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥ –Ω–µ–¥–µ–ª–∏
            score = 0
            if len(week_checkins) >= 6:
                score += 25  # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
            if weights and abs(weights[-1] - weights[0]) > 0.2:
                score += 25  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞
            if steps and sum(steps)/len(steps) >= 8000:
                score += 25  # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if water and sum(water)/len(water) >= 2000:
                score += 25  # –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è
            
            stars = "‚≠ê" * (score // 20)
            report += f"**–û—Ü–µ–Ω–∫–∞ –Ω–µ–¥–µ–ª–∏:** {stars} ({score}/100)\n\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
            report += "üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            
            if user and user.goal == Goal.LOSE_WEIGHT:
                if weights and weight_change >= 0:
                    report += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞\n"
                    report += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞—Ä–¥–∏–æ –Ω–∞–≥—Ä—É–∑–∫–∏\n"
                elif weights and weight_change < -1.5:
                    report += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ç–µ–º–ø! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ\n"
                else:
                    report += "‚Ä¢ –•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–º–ø\n"
            
            if not steps or sum(steps)/len(steps) < 8000:
                report += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ö–æ–¥—å–±—ã\n"
            
            if not water or sum(water)/len(water) < 2000:
                report += "‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n"
            
            # –ú–æ—Ç–∏–≤–∞—Ü–∏—è
            motivational_endings = [
                "\nüí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "\nüî• –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!",
                "\n‚≠ê –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ —à–∞–≥ –∫ —Ç–≤–æ–µ–π —Ü–µ–ª–∏!",
                "\nüéØ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç!",
                "\nüöÄ –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –±—É–¥–µ—Ç –µ—â–µ –ª—É—á—à–µ!"
            ]
            
            report += random.choice(motivational_endings)
            
            return report
    
    async def get_plateau_motivation(self, user_id: int) -> str:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –ø–ª–∞—Ç–æ"""
        messages = [
            "üåü **–ü–ª–∞—Ç–æ - —ç—Ç–æ –Ω–µ —Å—Ç–æ–ø!**\n\n"
            "–¢–≤–æ–µ —Ç–µ–ª–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å - —ç—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!\n"
            "–í—Ä–µ–º—è –≤–Ω–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ\n"
            "‚Ä¢ –î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –≤–∏–¥—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            "–ü–æ–º–Ω–∏: –ø–ª–∞—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ, —Ç–≤–æ—è —Ä–µ—à–∏–º–æ—Å—Ç—å - –Ω–∞–≤—Å–µ–≥–¥–∞! üí™",
            
            "üéØ **–ü—Ä–æ—Ä—ã–≤ –±–ª–∏–∑–∫–æ!**\n\n"
            "–ó–Ω–∞–µ—à—å, —á—Ç–æ –æ–±—â–µ–≥–æ —É –≤—Å–µ—Ö, –∫—Ç–æ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏?\n"
            "–û–Ω–∏ –Ω–µ —Å–¥–∞–ª–∏—Å—å –Ω–∞ –ø–ª–∞—Ç–æ!\n\n"
            "–¢–≤–æ–µ —Ç–µ–ª–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –Ω–æ–≤–æ–º—É —Ä—ã–≤–∫—É.\n"
            "–î–æ–≤–µ—Ä—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π! üöÄ",
            
            "üí° **–í—Ä–µ–º—è –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤!**\n\n"
            "–ü–ª–∞—Ç–æ = –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ:\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n"
            "‚Ä¢ –ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–Ω—è\n\n"
            "–í—Å—Ç—Ä—è—Ö–Ω–∏ —Ä—É—Ç–∏–Ω—É –∏ —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç! ‚ö°",
            
            "üèî **–¢—ã –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ –ø–ª–∞—Ç–æ!**\n\n"
            "–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Ç–æ–ª—å–∫–æ –≤–≤–µ—Ä—Ö!\n"
            "–ù–µ –≤–µ—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            "‚Ä¢ –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?\n"
            "‚Ä¢ –ö–∞–∫ —Å–∏–¥–∏—Ç –æ–¥–µ–∂–¥–∞?\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏?\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π, –ø—Ä–æ—Ä—ã–≤ –Ω–µ–∏–∑–±–µ–∂–µ–Ω! üí™"
        ]
        
        return random.choice(messages)
    
    async def celebrate_achievement(self, achievement_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        celebrations = {
            "weight_goal": "üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¶–ï–õ –î–û–°–¢–ò–ì–ù–£–¢–ê!** üéâ\n\n"
                          "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) —ç—Ç–æ! –¢–≤–æ—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –∏ —É–ø–æ—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω–µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n"
                          "–≠—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü, –∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏!\n\n"
                          "–ß—Ç–æ –¥–∞–ª—å—à–µ?\n"
                          "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
                          "‚Ä¢ –ù–æ–≤—ã–µ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–∏\n"
                          "‚Ä¢ –ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º\n\n"
                          "–¢—ã - –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ! üåü",
            
            "month_streak": "üî• **30 –î–ù–ï–ô –ü–û–î–†–Ø–î!** üî•\n\n"
                           "–¶–µ–ª—ã–π –º–µ—Å—è—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!\n"
                           "–¢—ã –¥–æ–∫–∞–∑–∞–ª(–∞), —á—Ç–æ –º–æ–∂–µ—à—å –≤—Å–µ!\n\n"
                           "–≠—Ç–æ —É–∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤—ã—á–∫–∞ - —ç—Ç–æ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏! üí™",
            
            "10kg_lost": "üèÜ **–ú–ò–ù–£–° 10 –ö–ì!** üèÜ\n\n"
                        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞ - —ç—Ç–æ —Ç–≤–æ—è –ø–æ–±–µ–¥–∞ –Ω–∞–¥ —Å–æ–±–æ–π!\n"
                        "10 –∫–≥ = 10 000 —Ä–µ—à–µ–Ω–∏–π –≤ –ø–æ–ª—å–∑—É –∑–¥–æ—Ä–æ–≤—å—è!\n\n"
                        "–ì–æ—Ä–¥–∏—Å—å —Å–æ–±–æ–π! –¢—ã –∑–∞—Å–ª—É–∂–∏–ª(–∞)! üëë",
            
            "100_days": "üíØ **100 –î–ù–ï–ô –í –ü–†–û–ì–†–ê–ú–ú–ï!** üíØ\n\n"
                       "–¢—ã —Å –Ω–∞–º–∏ —É–∂–µ 100 –¥–Ω–µ–π!\n"
                       "–ó–∞ —ç—Ç–æ –≤—Ä–µ–º—è —Ç—ã –∏–∑–º–µ–Ω–∏–ª(–∞) –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ, –Ω–æ –∏ –º—ã—à–ª–µ–Ω–∏–µ!\n\n"
                       "–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞! üìñ",
            
            "perfect_week": "‚≠ê **–ò–î–ï–ê–õ–¨–ù–ê–Ø –ù–ï–î–ï–õ–Ø!** ‚≠ê\n\n"
                           "7 –¥–Ω–µ–π = 7 –ø–æ–±–µ–¥!\n"
                           "‚Ä¢ –í—Å–µ —á–µ–∫-–∏–Ω—ã ‚úÖ\n"
                           "‚Ä¢ –í—Å–µ —Ü–µ–ª–∏ ‚úÖ\n"
                           "‚Ä¢ –í—Å–µ –ø–æ –ø–ª–∞–Ω—É ‚úÖ\n\n"
                           "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, —á–µ–º–ø–∏–æ–Ω! üèÖ"
        }
        
        return celebrations.get(achievement_type, 
                                "üéä –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéä")