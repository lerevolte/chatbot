import asyncio
import logging
from datetime import datetime, time, timedelta
from typing import Optional
from aiogram import Bot
from sqlalchemy import select, and_

from database.models import User, CheckIn
from database.connection import get_session
from bot.keyboards.checkin import get_checkin_reminder_keyboard

logger = logging.getLogger(__name__)

class ReminderService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —á–µ–∫-–∏–Ω–∞—Ö"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.running = False
        self.tasks = []
        
        # ========== –ù–ê–°–¢–†–û–ô–ö–ò –í–†–ï–ú–ï–ù–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==========
        self.morning_time = time(8, 0)  # 8:00 —É—Ç—Ä–∞
        self.evening_time = time(20, 0)  # 20:00 –≤–µ—á–µ—Ä–∞
        self.water_reminder_times = [
            time(10, 0),  # 10:00
            time(13, 0),  # 13:00
            time(16, 0),  # 16:00
            time(19, 0),  # 19:00
        ]
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.running:
            return
        
        self.running = True
        logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        self.tasks = [
            asyncio.create_task(self.morning_reminder_loop()),
            asyncio.create_task(self.evening_reminder_loop()),
            asyncio.create_task(self.water_reminder_loop()),
        ]
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        for task in self.tasks:
            task.cancel()
        logger.info("–°–µ—Ä–≤–∏—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def morning_reminder_loop(self):
        """–¶–∏–∫–ª —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.running:
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                now = datetime.now()
                next_reminder = datetime.combine(now.date(), self.morning_time)
                
                if next_reminder <= now:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    next_reminder += timedelta(days=1)
                
                # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                wait_seconds = (next_reminder - now).total_seconds()
                await asyncio.sleep(wait_seconds)
                
                if not self.running:
                    break
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await self.send_morning_reminders()
                
                # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {e}")
                await asyncio.sleep(60)
    
    async def evening_reminder_loop(self):
        """–¶–∏–∫–ª –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while self.running:
            try:
                now = datetime.now()
                next_reminder = datetime.combine(now.date(), self.evening_time)
                
                if next_reminder <= now:
                    next_reminder += timedelta(days=1)
                
                wait_seconds = (next_reminder - now).total_seconds()
                await asyncio.sleep(wait_seconds)
                
                if not self.running:
                    break
                
                await self.send_evening_reminders()
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö: {e}")
                await asyncio.sleep(60)
    
    async def water_reminder_loop(self):
        """–¶–∏–∫–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ"""
        while self.running:
            try:
                now = datetime.now()
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                next_time = None
                for reminder_time in self.water_reminder_times:
                    next_reminder = datetime.combine(now.date(), reminder_time)
                    if next_reminder > now:
                        next_time = next_reminder
                        break
                
                if not next_time:
                    # –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–∏, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                    next_time = datetime.combine(
                        now.date() + timedelta(days=1),
                        self.water_reminder_times[0]
                    )
                
                wait_seconds = (next_time - now).total_seconds()
                await asyncio.sleep(wait_seconds)
                
                if not self.running:
                    break
                
                await self.send_water_reminders()
                await asyncio.sleep(60)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –æ –≤–æ–¥–µ: {e}")
                await asyncio.sleep(60)
    
    async def send_morning_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await session.execute(
                select(User).where(
                    and_(
                        User.is_active == True,
                        User.onboarding_completed == True
                    )
                )
            )
            users = result.scalars().all()
            
            keyboard = get_checkin_reminder_keyboard()
            
            for user in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–¥–µ–ª–∞–Ω –ª–∏ —É–∂–µ —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω
                    today = datetime.now().date()
                    result = await session.execute(
                        select(CheckIn).where(
                            and_(
                                CheckIn.user_id == user.id,
                                CheckIn.date >= datetime.combine(today, datetime.min.time()),
                                CheckIn.date <= datetime.combine(today, datetime.max.time())
                            )
                        )
                    )
                    checkin = result.scalar_one_or_none()
                    
                    if not checkin or not checkin.weight:
                        # –ï—Å–ª–∏ —á–µ–∫-–∏–Ω –Ω–µ —Å–¥–µ–ª–∞–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤–µ—Å
                        await self.bot.send_message(
                            user.telegram_id,
                            "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n"
                            "–ù–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω:\n"
                            "‚Ä¢ –í–∑–≤–µ—Å—å—Å—è –Ω–∞—Ç–æ—â–∞–∫\n"
                            "‚Ä¢ –û—Ç–º–µ—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n"
                            "‚Ä¢ –û—Ü–µ–Ω–∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ\n\n"
                            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É!",
                            reply_markup=keyboard
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    async def send_evening_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        async with get_session() as session:
            result = await session.execute(
                select(User).where(
                    and_(
                        User.is_active == True,
                        User.onboarding_completed == True
                    )
                )
            )
            users = result.scalars().all()
            
            keyboard = get_checkin_reminder_keyboard()
            
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–∫-–∏–Ω
                    today = datetime.now().date()
                    result = await session.execute(
                        select(CheckIn).where(
                            and_(
                                CheckIn.user_id == user.id,
                                CheckIn.date >= datetime.combine(today, datetime.min.time()),
                                CheckIn.date <= datetime.combine(today, datetime.max.time())
                            )
                        )
                    )
                    checkin = result.scalar_one_or_none()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = "üåô –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!\n\n"
                    
                    if not checkin or not checkin.steps:
                        message += "üìù –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å:\n"
                        if not checkin or not checkin.steps:
                            message += "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å\n"
                        if not checkin or not checkin.water_ml:
                            message += "‚Ä¢ –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏–ª(–∞)\n"
                        message += "‚Ä¢ –ó–∞–º–µ—Ç–∫–∏ –æ –¥–Ω–µ\n"
                    else:
                        message += "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –ó–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è!"
                    
                    await self.bot.send_message(
                        user.telegram_id,
                        message,
                        reply_markup=keyboard
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
    
    async def send_water_reminders(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ"""
        async with get_session() as session:
            result = await session.execute(
                select(User).where(
                    and_(
                        User.is_active == True,
                        User.onboarding_completed == True
                    )
                )
            )
            users = result.scalars().all()
            
            for user in users:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–∫-–∏–Ω
                    today = datetime.now().date()
                    result = await session.execute(
                        select(CheckIn).where(
                            and_(
                                CheckIn.user_id == user.id,
                                CheckIn.date >= datetime.combine(today, datetime.min.time()),
                                CheckIn.date <= datetime.combine(today, datetime.max.time())
                            )
                        )
                    )
                    checkin = result.scalar_one_or_none()
                    
                    current_water = checkin.water_ml if checkin and checkin.water_ml else 0
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ –º–µ–Ω—å—à–µ —Ü–µ–ª–∏
                    if current_water < 2000:
                        remaining = 2000 - current_water
                        await self.bot.send_message(
                            user.telegram_id,
                            f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ!\n\n"
                            f"–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {current_water/1000:.1f}–ª\n"
                            f"–î–æ —Ü–µ–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {remaining/1000:.1f}–ª\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π /checkin –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")