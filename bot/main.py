import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio import Redis

from bot.config import settings
from bot.handlers import start, profile, meal_plan, checkin, stats, integrations, payment, analytics, help
from bot.services.smart_reminder import SmartReminderService
from bot.services.fitness_tracker_integration import FitnessIntegrationService
from database.connection import init_db
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO if not settings.DEBUG else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
reminder_service = None
fitness_service = None

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global reminder_service, fitness_service
    
    logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminder_service = SmartReminderService(bot)
    await reminder_service.start()
    logger.info("–°–µ—Ä–≤–∏—Å —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    fitness_service = FitnessIntegrationService()
    await fitness_service.load_user_integrations()
    logger.info("–°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands(bot)
    
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    global reminder_service
    
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    if reminder_service:
        await reminder_service.stop()
    
    logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    from aiogram.types import BotCommand
    
    commands = [
        BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="meal_plan", description="üçΩ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è"),
        BotCommand(command="checkin", description="‚úÖ –ß–µ–∫-–∏–Ω"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏"),
        BotCommand(command="analytics", description="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è"),
        BotCommand(command="integrations", description="üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"),
        BotCommand(command="reminder_settings", description="‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    ]
    
    await bot.set_my_commands(commands)

async def auto_sync_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    global fitness_service
    
    while True:
        try:
            # –ñ–¥–µ–º –¥–æ 6 —É—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            now = datetime.now()
            tomorrow = now.replace(hour=6, minute=0, second=0, microsecond=0) + timedelta(days=1)
            wait_seconds = (tomorrow - now).total_seconds()
            
            await asyncio.sleep(wait_seconds)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
            if fitness_service:
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
                for user_id, services in fitness_service.user_integrations.items():
                    try:
                        results = await fitness_service.sync_all(user_id)
                        logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {results}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è {user_id}: {e}")
                
                logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await asyncio.sleep(86400)
            
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è FSM
    redis = Redis.from_url(settings.redis_url)
    storage = RedisStorage(redis=redis)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ startup –∏ shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.include_router(start.router)
    dp.include_router(profile.router)
    dp.include_router(meal_plan.router)
    dp.include_router(checkin.router)
    dp.include_router(stats.router)  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    dp.include_router(integrations.router)  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    dp.include_router(payment.router)
    dp.include_router(analytics.router)
    dp.include_router(help.router)

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    auto_sync = asyncio.create_task(auto_sync_task())

    plateau_check = asyncio.create_task(plateau_check_task())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        auto_sync.cancel()
        await bot.session.close()
        await redis.aclose()

async def plateau_check_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–æ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    from bot.services.plateau_adaptation import PlateauAdaptationService
    from bot.services.motivation_service import MotivationService
    
    plateau_service = PlateauAdaptationService()
    motivation_service = MotivationService()
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 10 —É—Ç—Ä–∞
            now = datetime.now()
            tomorrow = now.replace(hour=10, minute=0, second=0, microsecond=0) + timedelta(days=1)
            wait_seconds = (tomorrow - now).total_seconds()
            
            await asyncio.sleep(wait_seconds)
            
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–æ...")
            
            async with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = await session.execute(
                    select(User).where(
                        and_(
                            User.is_active == True,
                            User.onboarding_completed == True,
                            User.is_premium == True  # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        )
                    )
                )
                users = result.scalars().all()
                
                for user in users:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–æ
                        plateau_data = await plateau_service._detect_plateau(user.id)
                        
                        if plateau_data['is_plateau'] and plateau_data['plateau_days'] == 7:
                            # –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è –ø–ª–∞—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            motivation = await motivation_service.get_plateau_motivation(user.telegram_id)
                            
                            await bot.send_message(
                                user.telegram_id,
                                f"üìä **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞**\n\n"
                                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç–æ –≤–µ—Å–∞ (7 –¥–Ω–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π).\n\n"
                                f"{motivation}\n\n"
                                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analytics –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞.",
                                parse_mode="Markdown"
                            )
                            
                        elif plateau_data['plateau_days'] >= 14:
                            # –î–≤–µ –Ω–µ–¥–µ–ª–∏ –ø–ª–∞—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
                            result = await plateau_service.check_and_adapt(user.telegram_id)
                            
                            if result['success'] and result.get('is_plateau'):
                                await bot.send_message(
                                    user.telegram_id,
                                    "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–ª–∞–Ω–∞**\n\n"
                                    "–í–∞—à –ø–ª–∞–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Ä—ã–≤–∞ –ø–ª–∞—Ç–æ.\n"
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.\n\n"
                                    "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /analytics",
                                    parse_mode="Markdown"
                                )
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
        except asyncio.CancelledError:
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–æ: {e}")
            await asyncio.sleep(3600)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º —á–∞—Å

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise