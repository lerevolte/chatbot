from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from datetime import datetime
import logging
import os

from database.models import User
from database.connection import get_session
from bot.services.analytics_service import AnalyticsService
from bot.services.plateau_adaptation import PlateauAdaptationService
from bot.services.motivation_service import MotivationService
from sqlalchemy import select

router = Router()
logger = logging.getLogger(__name__)

# ============ –ö–û–ú–ê–ù–î–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò ============
@router.message(Command("analytics"))
async def analytics_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="full_report"),
            InlineKeyboardButton(text="üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–æ", callback_data="check_plateau")
        ],
        [
            InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è", callback_data="daily_motivation"),
            InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="weekly_report")
        ],
        [
            InlineKeyboardButton(text="üéØ –ù–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂", callback_data="new_challenge"),
            InlineKeyboardButton(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="my_achievements")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", callback_data="adapt_plan"),
            InlineKeyboardButton(text="üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")
        ]
    ])
    
    await message.answer(
        "üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è**\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, "
        "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# ============ –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ ============
@router.callback_query(F.data == "full_report")
async def generate_full_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        analytics_service = AnalyticsService()
        try:
            report_data = await analytics_service.generate_comprehensive_report(user.id)
            
            if report_data:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ —Ñ–æ—Ç–æ
                await callback.message.answer_photo(
                    photo=report_data,
                    caption="üìä **–í–∞—à –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!**\n\n"
                           "–û—Ç—á–µ—Ç –≤–∫–ª—é—á–∞–µ—Ç:\n"
                           "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º\n"
                           "‚Ä¢ –ö–∞—Ä—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n"
                           "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–Ω–∞\n"
                           "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏\n"
                           "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                           "_–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞_",
                    parse_mode="Markdown"
                )
            else:
                await callback.message.answer(
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.\n"
                    "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω—ã!"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

# ============ –ü–†–û–í–ï–†–ö–ê –ü–õ–ê–¢–û ============
@router.callback_query(F.data == "check_plateau")
async def check_plateau(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–æ"""
    await callback.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    plateau_service = PlateauAdaptationService()
    result = await plateau_service.check_and_adapt(callback.from_user.id)
    
    if not result['success']:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–æ")
        return
    
    if result['is_plateau']:
        text = f"‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç–æ!**\n\n"
        text += f"–í–∞—à –≤–µ—Å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è —É–∂–µ {result['plateau_days']} –¥–Ω–µ–π.\n\n"
        text += "**–ê–¥–∞–ø—Ç–∞—Ü–∏–∏:**\n"
        
        adaptations = result.get('adaptations', {})
        
        if adaptations.get('calorie_adjustment'):
            adj = adaptations['calorie_adjustment']
            text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {adj:+d} –∫–∫–∞–ª\n"
        
        if adaptations.get('strategies'):
            text += "\n**–°—Ç—Ä–∞—Ç–µ–≥–∏–∏:**\n"
            for strategy in adaptations['strategies']:
                text += f"‚Ä¢ {strategy}\n"
        
        if adaptations.get('activity_changes'):
            text += "\n**–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**\n"
            for key, value in adaptations['activity_changes'].items():
                text += f"‚Ä¢ {key}: {value}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üöÄ –ü–ª–∞–Ω –ø—Ä–æ—Ä—ã–≤–∞", callback_data="breakthrough_plan"),
                InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="plateau_tips")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_analytics")
            ]
        ])
        
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await callback.message.answer(
            "‚úÖ **–ü–ª–∞—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!**\n\n"
            "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n"
            "üí° –°–æ–≤–µ—Ç: –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å—é –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ:\n"
            "‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω 7-9 —á–∞—Å–æ–≤\n"
            "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            parse_mode="Markdown"
        )

# ============ –ü–õ–ê–ù –ü–†–û–†–´–í–ê –ü–õ–ê–¢–û ============
@router.callback_query(F.data == "breakthrough_plan")
async def breakthrough_plan(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø—Ä–æ—Ä—ã–≤–∞ –ø–ª–∞—Ç–æ"""
    await callback.answer("–°–æ–∑–¥–∞—é –ø–ª–∞–Ω –ø—Ä–æ—Ä—ã–≤–∞...")
    
    plateau_service = PlateauAdaptationService()
    plan = await plateau_service.generate_breakthrough_plan(callback.from_user.id)
    
    if plan['success']:
        text = "üöÄ **–ü–ª–∞–Ω –ø—Ä–æ—Ä—ã–≤–∞ –ø–ª–∞—Ç–æ (7 –¥–Ω–µ–π)**\n\n"
        
        for day_plan in plan['plan']['days']:
            text += f"**–î–µ–Ω—å {day_plan['day']}:**\n"
            text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {day_plan['calories']} –∫–∫–∞–ª ({day_plan['type']})\n"
            
            if 'cardio' in day_plan:
                text += f"‚Ä¢ –ö–∞—Ä–¥–∏–æ: {day_plan['cardio']}\n"
            if 'strength' in day_plan:
                text += f"‚Ä¢ –°–∏–ª–æ–≤–∞—è: {day_plan['strength']}\n"
            if 'hiit' in day_plan:
                text += f"‚Ä¢ HIIT: {day_plan['hiit']}\n"
            if 'rest' in day_plan:
                text += f"‚Ä¢ –î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞\n"
            text += "\n"
        
        text += "**–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**\n"
        for rec in plan['plan']['recommendations']:
            text += f"‚Ä¢ {rec}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –ø–ª–∞–Ω", callback_data="start_breakthrough"),
                InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å PDF", callback_data="download_breakthrough")
            ],
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="check_plateau")
            ]
        ])
        
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø—Ä–æ—Ä—ã–≤–∞")

# ============ –ú–û–¢–ò–í–ê–¶–ò–Ø ============
@router.callback_query(F.data == "daily_motivation")
async def daily_motivation(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–Ω—è"""
    await callback.answer()
    
    motivation_service = MotivationService()
    motivation = await motivation_service.get_daily_motivation(callback.from_user.id)
    
    if motivation['success']:
        text = "üåü **–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è**\n\n"
        text += f"_{motivation['quote']}_\n\n"
        
        if motivation['streak'] > 0:
            text += f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: {motivation['streak']} –¥–Ω–µ–π\n\n"
        
        text += f"{motivation['tip']}\n\n"
        
        if motivation['achievements']:
            text += "üèÜ **–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            for achievement in motivation['achievements']:
                text += f"{achievement['emoji']} {achievement['text']}\n"
            text += "\n"
        
        if motivation['challenge']:
            text += f"üéØ **–ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è:**\n"
            text += f"{motivation['challenge']['name']}\n"
            text += f"–ó–∞–¥–∞–Ω–∏–µ: {motivation['challenge']['task']}\n"
            text += f"–ù–∞–≥—Ä–∞–¥–∞: {motivation['challenge']['reward']}\n"
        
        await callback.message.answer(text, parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é")

# ============ –ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢ ============
@router.callback_query(F.data == "weekly_report")
async def weekly_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
    await callback.answer("–ì–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç...")
    
    motivation_service = MotivationService()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            report = await motivation_service.generate_weekly_report(user.id)
            await callback.message.answer(report, parse_mode="Markdown")
        else:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# ============ –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–õ–ê–ù–ê ============
@router.callback_query(F.data == "adapt_plan")
async def adapt_plan(callback: CallbackQuery):
    """–ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é...")
    
    plateau_service = PlateauAdaptationService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤
    needs_break = await plateau_service.suggest_diet_break(callback.from_user.id)
    
    if needs_break:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –¥–∏–µ—Ç-–ø–µ—Ä–µ—Ä—ã–≤", callback_data="start_diet_break"),
                InlineKeyboardButton(text="‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–ª–∞–Ω", callback_data="continue_plan")
            ]
        ])
        
        await callback.message.answer(
            "üîÑ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏–µ—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤!**\n\n"
            "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            "–î–∏–µ—Ç-–ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ 7-14 –¥–Ω–µ–π –ø–æ–º–æ–∂–µ—Ç:\n"
            "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º\n"
            "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å\n"
            "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –Ω–æ–≤–æ–º—É —ç—Ç–∞–ø—É\n\n"
            "–í–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞:\n"
            "‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
            "‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        # –û–±—ã—á–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        result = await plateau_service.check_and_adapt(callback.from_user.id)
        
        if result['success']:
            await callback.message.answer(
                "‚úÖ **–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω!**\n\n"
                "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /meal_plan –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.",
                parse_mode="Markdown"
            )
        else:
            await callback.message.answer("‚ùå –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ============
@router.callback_query(F.data == "get_recommendations")
async def get_recommendations(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    await callback.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        analytics_service = AnalyticsService()
        analysis = await analytics_service.analyze_user_progress(user.id)
        
        text = "üí° **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**\n\n"
        
        if analysis['is_plateau']:
            text += f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–ª–∞—Ç–æ ({analysis['plateau_days']} –¥–Ω–µ–π)\n"
            text += f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ –ø–∏—Ç–∞–Ω–∏—é –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n\n"
        
        if analysis.get('calorie_adjustment'):
            adj = analysis['calorie_adjustment']
            if adj > 0:
                text += f"üìà **–ü–∏—Ç–∞–Ω–∏–µ:** –£–≤–µ–ª–∏—á—å—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ {adj} –∫–∫–∞–ª\n\n"
            else:
                text += f"üìâ **–ü–∏—Ç–∞–Ω–∏–µ:** –£–º–µ–Ω—å—à–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ {abs(adj)} –∫–∫–∞–ª\n\n"
        
        if analysis.get('activity_recommendation'):
            text += f"üèÉ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {analysis['activity_recommendation']}\n\n"
        
        if analysis.get('sleep_recommendation'):
            text += f"üò¥ **–°–æ–Ω:** {analysis['sleep_recommendation']}\n\n"
        
        text += f"üí™ {analysis.get('motivation', '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!')}"
        
        await callback.message.answer(text, parse_mode="Markdown")

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï CALLBACK ============
@router.callback_query(F.data == "back_to_analytics")
async def back_to_analytics(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await analytics_menu(callback.message)

@router.callback_query(F.data == "plateau_tips")
async def plateau_tips(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø—Ä–∏ –ø–ª–∞—Ç–æ"""
    motivation_service = MotivationService()
    tips = await motivation_service.get_plateau_motivation(callback.from_user.id)
    await callback.message.answer(tips, parse_mode="Markdown")