from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlalchemy import select

from database.models import User, Goal
from database.connection import get_session
from bot.utils.calculations import calculate_water_intake, calculate_weekly_progress

router = Router()

@router.message(Command("profile"))
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.onboarding_completed:
            await message.answer(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        weight_diff = abs(user.target_weight - user.current_weight)
        weight_lost = 0
        
        if user.goal == Goal.LOSE_WEIGHT:
            weight_lost = user.current_weight - user.target_weight
            if weight_lost > 0:
                progress_percent = min(100, (weight_lost / weight_diff) * 100) if weight_diff > 0 else 0
            else:
                progress_percent = 0
        elif user.goal == Goal.GAIN_MUSCLE:
            weight_gained = user.current_weight - (user.target_weight - weight_diff)
            progress_percent = min(100, (weight_gained / weight_diff) * 100) if weight_diff > 0 else 0
        else:  # MAINTAIN
            progress_percent = 100
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_status = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
        days_left = 0
        
        if user.trial_started_at:
            trial_end = user.trial_started_at + timedelta(days=7)
            if datetime.utcnow() < trial_end:
                days_left = (trial_end - datetime.utcnow()).days
                subscription_status = f"üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
        elif user.subscription_until and user.subscription_until > datetime.utcnow():
            days_left = (user.subscription_until - datetime.utcnow()).days
            subscription_status = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        water_intake = calculate_water_intake(user.current_weight)
        weekly_progress = calculate_weekly_progress(
            user.current_weight, 
            user.target_weight, 
            user.goal
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ü–µ–ª–∏
        goal_emoji = {
            Goal.LOSE_WEIGHT: "üî•",
            Goal.GAIN_MUSCLE: "üí™",
            Goal.MAINTAIN: "‚öñÔ∏è"
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = (
            "üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìä **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
            f"‚îú –†–æ—Å—Ç: {user.height} —Å–º\n"
            f"‚îú –¢–µ–∫—É—â–∏–π –≤–µ—Å: {user.current_weight} –∫–≥\n"
            f"‚îú –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user.target_weight} –∫–≥\n"
            f"‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: ‚ñì{'‚ñì' * int(progress_percent/10)}{'‚ñë' * (10-int(progress_percent/10))} {progress_percent:.1f}%\n\n"
            f"üéØ **–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:**\n"
            f"‚îú –ö–∞–ª–æ—Ä–∏–∏: {user.daily_calories} –∫–∫–∞–ª\n"
            f"‚îú –ë–µ–ª–∫–∏: {user.daily_protein}–≥\n"
            f"‚îú –ñ–∏—Ä—ã: {user.daily_fats}–≥\n"
            f"‚îî –£–≥–ª–µ–≤–æ–¥—ã: {user.daily_carbs}–≥\n\n"
            f"üíß **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:**\n"
            f"‚îú –í–æ–¥–∞: {water_intake/1000:.1f}–ª\n"
            f"‚îú –®–∞–≥–∏: 8000-10000\n"
            f"‚îî –°–æ–Ω: 7-9 —á–∞—Å–æ–≤\n\n"
            f"{goal_emoji[user.goal]} **–¶–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é:** "
            f"{'‚àí' if user.goal == Goal.LOSE_WEIGHT else '+'}"
            f"{abs(weekly_progress):.2f} –∫–≥\n\n"
            f"üí≥ **–°—Ç–∞—Ç—É—Å:** {subscription_status}\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            "üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ /meal_plan - –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
            "‚Ä¢ /checkin - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "‚Ä¢ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
        )
        
        await message.answer(profile_text, parse_mode="Markdown")

@router.message(Command("settings"))
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.onboarding_completed:
            await message.answer(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return
        
        settings_text = (
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "üìù /update_weight - –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
            "üéØ /update_goal - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª—å\n"
            "üçΩ /update_meals - –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
            "üîÑ /reset - –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ\n"
            "‚ùå /delete_account - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset"
        )
        
        await message.answer(settings_text, parse_mode="Markdown")

@router.message(Command("update_weight"))
async def update_weight_start(message: Message):
    """–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞"""
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–∞

@router.message(Command("stats"))
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.onboarding_completed:
            await message.answer(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return
        
        # –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        days_in_program = 0
        if user.created_at:
            days_in_program = (datetime.utcnow() - user.created_at).days
        
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —á–µ–∫-–∏–Ω–æ–≤
        stats_text = (
            "üìà **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"üìÖ –î–Ω–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {days_in_program}\n"
            f"‚öñÔ∏è –ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {user.current_weight} –∫–≥\n"
            f"üéØ –¶–µ–ª—å: {user.target_weight} –∫–≥\n\n"
            "üìä **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:**\n"
            "‚îú –ß–µ–∫-–∏–Ω–æ–≤: 0/7\n"
            "‚îú –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: - –∫–≥\n"
            "‚îú –ò–∑–º–µ–Ω–µ–Ω–∏–µ: - –∫–≥\n"
            "‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: 0\n\n"
            "üèÜ **–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**\n"
            "‚Ä¢ üîì –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å - ‚úÖ\n"
            "‚Ä¢ üîí –ù–µ–¥–µ–ª—è –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤\n"
            "‚Ä¢ üîí –ú–µ—Å—è—Ü –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
            "‚Ä¢ üîí –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        )
        
        await message.answer(stats_text, parse_mode="Markdown")