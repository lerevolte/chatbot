from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlalchemy import select, and_, func
import logging
import os

from database.models import User, CheckIn
from database.connection import get_session
from bot.services.charts_service import ChartsService
from bot.config import settings

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("stats"))
async def stats_menu(message: Message):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞", callback_data="chart_weight"),
            InlineKeyboardButton(text="üö∂ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="chart_activity")
        ],
        [
            InlineKeyboardButton(text="üí§ –°–æ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="chart_sleep"),
            InlineKeyboardButton(text="üìà –û–±—â–∞—è —Å–≤–æ–¥–∫–∞", callback_data="chart_summary")
        ],
        [
            InlineKeyboardButton(text="üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏", callback_data="goal_progress"),
            InlineKeyboardButton(text="üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞", callback_data="month_stats")
        ]
    ])
    
    await message.answer(
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "chart_weight")
async def show_weight_chart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        charts_service = ChartsService()
        chart_data = await charts_service.generate_weight_chart(user.id, days=30)
        
        if not chart_data:
            await callback.message.answer(
                "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Å–∞.\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            photo=chart_data,
            caption="üìä **–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞ –∑–∞ 30 –¥–Ω–µ–π**\n\n"
                    "üîµ –°–∏–Ω—è—è –ª–∏–Ω–∏—è - –≤–∞—à –≤–µ—Å\n"
                    "üî¥ –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è - —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å\n"
                    "‚ûñ –ü—É–Ω–∫—Ç–∏—Ä - –ª–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞"
        )

@router.callback_query(F.data == "chart_activity")
async def show_activity_chart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        charts_service = ChartsService()
        chart_data = await charts_service.generate_activity_chart(user.id, days=7)
        
        if not chart_data:
            await callback.message.answer(
                "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —à–∞–≥–∏ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã!"
            )
            return
        
        await callback.message.answer_photo(
            photo=chart_data,
            caption="üìä **–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é**\n\n"
                    "üìä –°—Ç–æ–ª–±—Ü—ã - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤\n"
                    "üíß –°–∏–Ω–∏–µ —Å—Ç–æ–ª–±—Ü—ã - –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n"
                    "üéØ –ü—É–Ω–∫—Ç–∏—Ä–Ω—ã–µ –ª–∏–Ω–∏–∏ - —Ü–µ–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        )

@router.callback_query(F.data == "chart_sleep")
async def show_sleep_chart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        charts_service = ChartsService()
        chart_data = await charts_service.generate_sleep_chart(user.id, days=14)
        
        if not chart_data:
            await callback.message.answer(
                "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–Ω–µ.\n"
                "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —á–∞—Å—ã —Å–Ω–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–º —á–µ–∫-–∏–Ω–µ!"
            )
            return
        
        await callback.message.answer_photo(
            photo=chart_data,
            caption="üí§ **–ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ 2 –Ω–µ–¥–µ–ª–∏**\n\n"
                    "üìä –í–µ—Ä—Ö–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ - —á–∞—Å—ã —Å–Ω–∞\n"
                    "üòä –ù–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n"
                    "‚ûñ –ü—É–Ω–∫—Ç–∏—Ä - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å–Ω–∞ (7-9 —á–∞—Å–æ–≤)"
        )

@router.callback_query(F.data == "chart_summary")
async def show_summary_chart(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â—É—é —Å–≤–æ–¥–∫—É...")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        charts_service = ChartsService()
        chart_data = await charts_service.generate_progress_summary(user.id)
        
        if not chart_data:
            await callback.message.answer(
                "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–≤–æ–¥–∫–∏.\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ —á–µ–∫-–∏–Ω—ã!"
            )
            return
        
        await callback.message.answer_photo(
            photo=chart_data,
            caption="üìä **–û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞**\n\n"
                    "–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ:\n"
                    "‚Ä¢ –î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞\n"
                    "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
                    "‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n"
                    "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )

@router.callback_query(F.data == "goal_progress")
async def show_goal_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.weight.isnot(None)
                )
            ).order_by(CheckIn.date)
        )
        checkins = result.scalars().all()
        
        if len(checkins) < 2:
            await callback.message.answer(
                "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
                "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞."
            )
            return
        
        start_weight = checkins[0].weight
        current_weight = checkins[-1].weight
        target_weight = user.target_weight
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        total_to_lose = abs(start_weight - target_weight)
        lost = abs(start_weight - current_weight)
        progress_percent = (lost / total_to_lose * 100) if total_to_lose > 0 else 0
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        days_passed = (checkins[-1].date - checkins[0].date).days
        if days_passed > 0 and lost > 0:
            rate_per_day = lost / days_passed
            days_to_goal = abs(current_weight - target_weight) / rate_per_day if rate_per_day > 0 else 999
            estimated_date = datetime.now() + timedelta(days=int(days_to_goal))
        else:
            estimated_date = None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        progress_bar = "‚ñì" * int(progress_percent/10) + "‚ñë" * (10-int(progress_percent/10))
        
        response = f"üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏**\n\n"
        response += f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {start_weight} –∫–≥\n"
        response += f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current_weight} –∫–≥\n"
        response += f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {target_weight} –∫–≥\n\n"
        response += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent:.1f}%\n\n"
        
        if user.goal == "lose_weight":
            response += f"‚úÖ –°–±—Ä–æ—à–µ–Ω–æ: {lost:.1f} –∫–≥\n"
            response += f"üìâ –û—Å—Ç–∞–ª–æ—Å—å: {abs(current_weight - target_weight):.1f} –∫–≥\n"
        elif user.goal == "gain_muscle":
            response += f"‚úÖ –ù–∞–±—Ä–∞–Ω–æ: {lost:.1f} –∫–≥\n"
            response += f"üìà –û—Å—Ç–∞–ª–æ—Å—å: {abs(target_weight - current_weight):.1f} –∫–≥\n"
        
        if estimated_date and days_to_goal < 365:
            response += f"\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏: {estimated_date.strftime('%d.%m.%Y')}\n"
            response += f"‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {int(days_to_goal)}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if progress_percent < 25:
            response += "\nüí° –í—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–ª–∞–Ω—É."
        elif progress_percent < 50:
            response += "\nüí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏."
        elif progress_percent < 75:
            response += "\nüî• –í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã! –ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å!"
        else:
            response += "\nüèÜ –í—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏! –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä—ã–≤–æ–∫!"
        
        await callback.message.answer(response, parse_mode="Markdown")

@router.callback_query(F.data == "month_stats")
async def show_month_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        month_ago = datetime.now() - timedelta(days=30)
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= month_ago
                )
            )
        )
        checkins = result.scalars().all()
        
        if not checkins:
            await callback.message.answer(
                "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω—ã!"
            )
            return
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_checkins = len(checkins)
        weights = [c.weight for c in checkins if c.weight]
        steps = [c.steps for c in checkins if c.steps]
        water = [c.water_ml for c in checkins if c.water_ml]
        sleep_hours = [c.sleep_hours for c in checkins if c.sleep_hours]
        
        # –ü–æ–¥—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
        days_8k_steps = sum(1 for s in steps if s >= 8000)
        days_2l_water = sum(1 for w in water if w >= 2000)
        days_good_sleep = sum(1 for s in sleep_hours if 7 <= s <= 9)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
        weight_change = 0
        if len(weights) >= 2:
            weight_change = weights[-1] - weights[0]
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–æ—Ç–æ –µ–¥—ã
        meal_photos = sum(1 for c in checkins if any([
            c.breakfast_photo, c.lunch_photo, c.dinner_photo, c.snack_photo
        ]))
        
        response = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π**\n\n"
        
        response += f"üìù **–ß–µ–∫-–∏–Ω—ã:** {total_checkins}/30 ({total_checkins/30*100:.0f}%)\n\n"
        
        if weights:
            response += f"‚öñÔ∏è **–í–µ—Å:**\n"
            response += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_change:+.1f} –∫–≥\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π: {sum(weights)/len(weights):.1f} –∫–≥\n"
            response += f"‚Ä¢ –ú–∏–Ω/–ú–∞–∫—Å: {min(weights):.1f}/{max(weights):.1f} –∫–≥\n\n"
        
        if steps:
            response += f"üö∂ **–®–∞–≥–∏:**\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(steps)/len(steps):.0f} —à–∞–≥–æ–≤/–¥–µ–Ω—å\n"
            response += f"‚Ä¢ –î–Ω–µ–π —Å 8000+: {days_8k_steps} ({days_8k_steps/30*100:.0f}%)\n"
            response += f"‚Ä¢ –í—Å–µ–≥–æ: {sum(steps):,} —à–∞–≥–æ–≤\n\n"
        
        if water:
            response += f"üíß **–í–æ–¥–∞:**\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(water)/len(water)/1000:.1f} –ª/–¥–µ–Ω—å\n"
            response += f"‚Ä¢ –î–Ω–µ–π —Å 2–ª+: {days_2l_water} ({days_2l_water/30*100:.0f}%)\n\n"
        
        if sleep_hours:
            response += f"üí§ **–°–æ–Ω:**\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {sum(sleep_hours)/len(sleep_hours):.1f} —á–∞—Å–æ–≤\n"
            response += f"‚Ä¢ –î–Ω–µ–π —Å 7-9—á: {days_good_sleep} ({days_good_sleep/30*100:.0f}%)\n\n"
        
        response += f"üì∏ **–§–æ—Ç–æ –µ–¥—ã:** {meal_photos} –∑–∞–ø–∏—Å–µ–π\n\n"
        
        # –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        completion_rate = total_checkins / 30
        if completion_rate >= 0.9:
            response += "üèÜ **–û—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞!** –í—ã –¥–µ–ª–∞–µ—Ç–µ —á–µ–∫-–∏–Ω—ã –ø–æ—á—Ç–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
        elif completion_rate >= 0.7:
            response += "‚úÖ **–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!** –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —á–µ–∫-–∏–Ω—ã."
        elif completion_rate >= 0.5:
            response += "üìà **–ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω–µ–µ."
        else:
            response += "üí° **–°–æ–≤–µ—Ç:** –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —á–µ–∫-–∏–Ω—ã –ø–æ–º–æ–≥—É—Ç –ª—É—á—à–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        
        await callback.message.answer(response, parse_mode="Markdown")