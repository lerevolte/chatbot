from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, PhotoSize
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, date
from sqlalchemy import select, and_
import logging
import os

from database.models import User, CheckIn
from database.connection import get_session
from bot.states.checkin import MorningCheckInStates, EveningCheckInStates, FoodPhotoStates
from bot.keyboards.checkin import get_mood_keyboard, get_meal_type_keyboard, get_water_keyboard, get_quick_weight_keyboard
from bot.services.ai_service import AIService
from bot.config import settings

router = Router()
logger = logging.getLogger(__name__)

# ============ –ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢–ê –ß–ï–ö-–ò–ù–ê ============
@router.message(Command("checkin"))
async def checkin_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ–∫-–∏–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω", callback_data="morning_checkin"),
            InlineKeyboardButton(text="üåô –í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω", callback_data="evening_checkin")
        ],
        [
            InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ –µ–¥—ã", callback_data="food_photo"),
            InlineKeyboardButton(text="üíß –í–æ–¥–∞", callback_data="quick_water")
        ],
        [
            InlineKeyboardButton(text="üìä –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="today_progress"),
            InlineKeyboardButton(text="üìà –ò—Å—Ç–æ—Ä–∏—è", callback_data="checkin_history")
        ]
    ])
    
    await message.answer(
        "üìù **–ß–µ–∫-–∏–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# ============ –£–¢–†–ï–ù–ù–ò–ô –ß–ï–ö-–ò–ù ============
@router.callback_query(F.data == "morning_checkin")
async def start_morning_checkin(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    await callback.answer()
    
    keyboard = get_quick_weight_keyboard()
    
    await callback.message.answer(
        "üåÖ **–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω**\n\n"
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º? (–≤ –∫–≥)\n"
        "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(MorningCheckInStates.weight)

@router.message(MorningCheckInStates.weight)
async def process_morning_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤–µ—Å–∞"""
    try:
        if "–≤—á–µ—Ä–∞" in message.text.lower():
            async with get_session() as session:
                result = await session.execute(
                    select(User).where(User.telegram_id == message.from_user.id)
                )
                user = result.scalar_one_or_none()
                weight = user.current_weight if user else 0
        elif "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower():
            weight = None
        else:
            weight_str = message.text.replace('–∫–≥', '').replace(',', '.').strip()
            weight = float(weight_str)
            if weight < 30 or weight > 300:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥)")
                return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(weight=weight)
    
    if weight:
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            if user:
                user.current_weight = weight
                await session.commit()
    
    await message.answer(
        "üí§ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª(–∞) —ç—Ç–æ–π –Ω–æ—á—å—é?\n"
        "(–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 24)",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(MorningCheckInStates.sleep)

@router.message(MorningCheckInStates.sleep)
async def process_sleep(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∞"""
    try:
        sleep_hours = float(message.text.replace(',', '.'))
        if sleep_hours < 0 or sleep_hours > 24:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (0-24)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(sleep_hours=sleep_hours)
    
    keyboard = get_mood_keyboard()
    await message.answer(
        "üòä –ö–∞–∫ —Ç–≤–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=keyboard
    )
    await state.set_state(MorningCheckInStates.mood)

@router.message(MorningCheckInStates.mood)
async def process_mood(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    mood_map = {
        "üòä –û—Ç–ª–∏—á–Ω–æ": "good",
        "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ": "normal",
        "üòî –ü–ª–æ—Ö–æ": "bad"
    }
    
    mood = mood_map.get(message.text, "normal")
    data = await state.get_data()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            await state.clear()
            return
        
        today = date.today()
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
        
        if not checkin:
            checkin = CheckIn(user_id=user.id)
            session.add(checkin)
        
        checkin.weight = data.get('weight')
        checkin.sleep_hours = data.get('sleep_hours')
        checkin.mood = mood
        
        await session.commit()
    
    response = "‚úÖ **–£—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
    
    if data.get('weight'):
        response += f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
    
    response += f"üí§ –°–æ–Ω: {data['sleep_hours']} —á–∞—Å–æ–≤\n"
    response += f"üòä –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {message.text}\n\n"
    
    if data['sleep_hours'] < 7:
        response += "üí° *–°–æ–≤–µ—Ç:* –°—Ç–∞—Ä–∞–π—Å—è —Å–ø–∞—Ç—å –º–∏–Ω–∏–º—É–º 7-8 —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n"
    elif data['sleep_hours'] > 9:
        response += "üí° *–°–æ–≤–µ—Ç:* –ò–∑–±—ã—Ç–æ–∫ —Å–Ω–∞ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤—è–ª–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è 7-9 —á–∞—Å–æ–≤.\n"
    else:
        response += "üëç –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞!\n"
    
    response += "\n–ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è:\n"
    response += "‚Ä¢ üíß –í—ã–ø–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã\n"
    response += "‚Ä¢ üö∂ –°–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º—É–º 8000 —à–∞–≥–æ–≤\n"
    response += "‚Ä¢ üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è\n"
    
    await message.answer(response, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    await state.clear()

# ============ –í–ï–ß–ï–†–ù–ò–ô –ß–ï–ö-–ò–ù ============
@router.callback_query(F.data == "evening_checkin")
async def start_evening_checkin(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    await callback.answer()
    
    await callback.message.answer(
        "üåô **–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω**\n\n"
        "üö∂ –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) —Å–µ–≥–æ–¥–Ω—è?\n"
        "(–≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏)",
        parse_mode="Markdown"
    )
    await state.set_state(EveningCheckInStates.steps)

@router.message(EveningCheckInStates.steps)
async def process_steps(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤"""
    if "–ø—Ä–æ–ø—É—Å" in message.text.lower():
        steps = None
    else:
        try:
            steps = int(message.text.replace(' ', ''))
            if steps < 0 or steps > 100000:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤")
                return
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
            return
    
    await state.update_data(steps=steps)
    
    keyboard = get_water_keyboard()
    await message.answer(
        "üíß –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –≤—ã–ø–∏–ª(–∞) —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=keyboard
    )
    await state.set_state(EveningCheckInStates.water)

@router.message(EveningCheckInStates.water)
async def process_water(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–¥—ã"""
    water_map = {
        "< 1–ª": 500,
        "1-1.5–ª": 1250,
        "1.5-2–ª": 1750,
        "2-2.5–ª": 2250,
        "> 2.5–ª": 3000
    }
    
    water = water_map.get(message.text)
    if not water:
        try:
            water_str = message.text.lower().replace('–ª', '').replace('–º–ª', '').replace(',', '.').strip()
            water_float = float(water_str)
            water = int(water_float * 1000) if water_float < 10 else int(water_float)
        except:
            water = 0
    
    await state.update_data(water_ml=water)
    
    await message.answer(
        "üìù –ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ?\n"
        "(–ø–∏—Ç–∞–Ω–∏–µ, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ)\n\n"
        "–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
    )
    await state.set_state(EveningCheckInStates.notes)

@router.message(EveningCheckInStates.notes)
async def process_notes(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞"""
    notes = None if "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower() else message.text
    data = await state.get_data()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        today = date.today()
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
        
        if not checkin:
            checkin = CheckIn(user_id=user.id)
            session.add(checkin)
        
        checkin.steps = data.get('steps')
        checkin.water_ml = data.get('water_ml')
        checkin.notes = notes
        
        await session.commit()
    
    response = "‚úÖ **–í–µ—á–µ—Ä–Ω–∏–π —á–µ–∫-–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
    response += "üìä **–ò—Ç–æ–≥–∏ –¥–Ω—è:**\n"
    
    if data.get('steps'):
        steps_emoji = "üéØ" if data['steps'] >= 8000 else "üìà"
        response += f"{steps_emoji} –®–∞–≥–∏: {data['steps']:,}\n"
        if data['steps'] < 8000:
            response += f"   _–û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {8000 - data['steps']:,}_\n"
    
    if data.get('water_ml'):
        water_l = data['water_ml'] / 1000
        water_emoji = "üíß" if water_l >= 2 else "üí¶"
        response += f"{water_emoji} –í–æ–¥–∞: {water_l:.1f}–ª\n"
    
    if notes:
        response += f"\nüìù –ó–∞–º–µ—Ç–∫–∏: {notes[:100]}...\n" if len(notes) > 100 else f"\nüìù –ó–∞–º–µ—Ç–∫–∏: {notes}\n"
    
    response += "\n**–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è!** üí™\n"
    response += "–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º –Ω–µ –∑–∞–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å —É—Ç—Ä–µ–Ω–Ω–∏–π —á–µ–∫-–∏–Ω!"
    
    await message.answer(response, reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    await state.clear()

# ============ –§–û–¢–û –ï–î–´ ============
@router.callback_query(F.data == "food_photo")
async def start_food_photo(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –µ–¥—ã"""
    await callback.answer()
    
    keyboard = get_meal_type_keyboard()
    
    await callback.message.answer(
        "üì∏ **–§–æ—Ç–æ –µ–¥—ã**\n\n"
        "–ö–∞–∫–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(FoodPhotoStates.meal_type)

@router.message(FoodPhotoStates.meal_type)
async def process_meal_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    meal_map = {
        "üåÖ –ó–∞–≤—Ç—Ä–∞–∫": "breakfast",
        "‚òÄÔ∏è –û–±–µ–¥": "lunch",
        "üåô –£–∂–∏–Ω": "dinner",
        "üçé –ü–µ—Ä–µ–∫—É—Å": "snack"
    }
    
    meal_type = meal_map.get(message.text)
    if not meal_type:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(meal_type=meal_type)
    
    await message.answer(
        "üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞\n\n"
        "_–Ø –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="Markdown"
    )
    await state.set_state(FoodPhotoStates.photo)

@router.message(FoodPhotoStates.photo, F.photo)
async def process_food_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –µ–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    data = await state.get_data()
    
    photo: PhotoSize = message.photo[-1]
    file_id = photo.file_id
    
    upload_dir = os.path.join(settings.UPLOAD_DIR, str(message.from_user.id))
    os.makedirs(upload_dir, exist_ok=True)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"{data['meal_type']}_{timestamp}.jpg"
    filepath = os.path.join(upload_dir, filename)
    
    bot = message.bot
    try:
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, filepath)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
        await state.clear()
        return
    
    await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π Vision Service
    from bot.services.vision_service import VisionService
    vision_service = VisionService()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analysis = await vision_service.analyze_food_photo(filepath, user)
        
        if not analysis.get('success'):
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–ª—é–¥–æ, –Ω–æ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        today = date.today()
        current_week = datetime.utcnow().isocalendar()[1]
        day_number = datetime.utcnow().weekday() + 1
        
        result = await session.execute(
            select(MealPlan).where(
                and_(
                    MealPlan.user_id == user.id,
                    MealPlan.week_number == current_week,
                    MealPlan.day_number == day_number
                )
            )
        )
        meal_plan = result.scalar_one_or_none()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–ª–∞–Ω–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        comparison = None
        if meal_plan and analysis.get('success'):
            planned_meal = getattr(meal_plan, data['meal_type'], None)
            if planned_meal:
                comparison = await vision_service.compare_with_plan(filepath, planned_meal, user)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫-–∏–Ω
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
        
        if not checkin:
            checkin = CheckIn(user_id=user.id)
            session.add(checkin)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
        if data['meal_type'] == 'breakfast':
            checkin.breakfast_photo = filepath
            checkin.breakfast_analysis = analysis if analysis.get('success') else None
        elif data['meal_type'] == 'lunch':
            checkin.lunch_photo = filepath
            checkin.lunch_analysis = analysis if analysis.get('success') else None
        elif data['meal_type'] == 'dinner':
            checkin.dinner_photo = filepath
            checkin.dinner_analysis = analysis if analysis.get('success') else None
        else:
            checkin.snack_photo = filepath
            checkin.snack_analysis = analysis if analysis.get('success') else None
        
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    meal_names = {
        "breakfast": "–ó–∞–≤—Ç—Ä–∞–∫",
        "lunch": "–û–±–µ–¥",
        "dinner": "–£–∂–∏–Ω",
        "snack": "–ü–µ—Ä–µ–∫—É—Å"
    }
    
    response = f"‚úÖ **{meal_names[data['meal_type']]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!**\n\n"
    
    if analysis.get('success'):
        response += f"üçΩ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:** {analysis.get('dish_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')}\n"
        response += f"üìä **–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:**\n"
        response += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {analysis.get('calories', 0)} –∫–∫–∞–ª\n"
        response += f"‚Ä¢ –ë–µ–ª–∫–∏: {analysis.get('protein', 0)}–≥\n"
        response += f"‚Ä¢ –ñ–∏—Ä—ã: {analysis.get('fats', 0)}–≥\n"
        response += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {analysis.get('carbs', 0)}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏
        healthiness = analysis.get('healthiness_score', 0)
        if healthiness >= 8:
            response += f"\nüåü –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {healthiness}/10 - –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n"
        elif healthiness >= 6:
            response += f"\n‚≠ê –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {healthiness}/10 - –•–æ—Ä–æ—à–µ–µ –±–ª—é–¥–æ\n"
        else:
            response += f"\n‚ö†Ô∏è –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {healthiness}/10 - –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
        if comparison and comparison.get('success'):
            response += f"\n**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–ª–∞–Ω—É:** {comparison['match_emoji']} {comparison['match_text']}\n"
            
            if comparison.get('daily_adjustments'):
                response += "\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –¥–µ–Ω—å:**\n"
                for adjustment in comparison['daily_adjustments']:
                    response += f"‚Ä¢ {adjustment}\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis.get('personal_recommendations'):
            recs = analysis['personal_recommendations']
            if recs.get('warnings'):
                response += "\n**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
                for warning in recs['warnings']:
                    response += f"{warning}\n"
            if recs.get('suggestions'):
                response += "\n**–°–æ–≤–µ—Ç—ã:**\n"
                for suggestion in recs['suggestions']:
                    response += f"{suggestion}\n"
    else:
        response += "üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏\n"
        response += "‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
    
    await message.answer(response, parse_mode="Markdown")
    await state.clear()

# ============ –ë–´–°–¢–†–´–ï –§–£–ù–ö–¶–ò–ò ============
@router.callback_query(F.data == "quick_water")
async def quick_water(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü•§ +250–º–ª", callback_data="add_water_250"),
            InlineKeyboardButton(text="ü•§ +500–º–ª", callback_data="add_water_500"),
            InlineKeyboardButton(text="ü•§ +1–ª", callback_data="add_water_1000")
        ]
    ])
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        today = date.today()
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
        
        current_water = checkin.water_ml if checkin and checkin.water_ml else 0
    
    await callback.message.edit_text(
        f"üíß **–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã**\n\n"
        f"–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {current_water/1000:.1f}–ª\n\n"
        f"–î–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("add_water_"))
async def add_water(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã"""
    amount = int(callback.data.split("_")[2])
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        today = date.today()
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
        
        if not checkin:
            checkin = CheckIn(user_id=user.id, water_ml=0)
            session.add(checkin)
        
        checkin.water_ml = (checkin.water_ml or 0) + amount
        await session.commit()
        
        total_water = checkin.water_ml
    
    await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount}–º–ª –≤–æ–¥—ã!")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü•§ +250–º–ª", callback_data="add_water_250"),
            InlineKeyboardButton(text="ü•§ +500–º–ª", callback_data="add_water_500"),
            InlineKeyboardButton(text="ü•§ +1–ª", callback_data="add_water_1000")
        ]
    ])
    
    emoji = "üíß" if total_water < 2000 else "üí¶" if total_water < 3000 else "üåä"
    
    await callback.message.edit_text(
        f"{emoji} **–¢—Ä–µ–∫–µ—Ä –≤–æ–¥—ã**\n\n"
        f"–°–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç–æ: {total_water/1000:.1f}–ª\n\n"
        f"{'–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!' if total_water >= 2000 else '–î–æ–±–∞–≤–∏—Ç—å:'}",
        reply_markup=keyboard if total_water < 3000 else None,
        parse_mode="Markdown"
    )

# ============ –ü–†–û–ì–†–ï–°–° –ò –ò–°–¢–û–†–ò–Ø ============
@router.callback_query(F.data == "today_progress")
async def show_today_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await callback.answer()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        today = date.today()
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= datetime.combine(today, datetime.min.time()),
                    CheckIn.date <= datetime.combine(today, datetime.max.time())
                )
            )
        )
        checkin = result.scalar_one_or_none()
    
    if not checkin:
        await callback.message.answer(
            "üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è**\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞!",
            parse_mode="Markdown"
        )
        return
    
    response = f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {today.strftime('%d.%m.%Y')}**\n\n"
    
    if checkin.weight or checkin.sleep_hours or checkin.mood:
        response += "**üåÖ –£—Ç—Ä–æ:**\n"
        if checkin.weight:
            response += f"‚Ä¢ –í–µ—Å: {checkin.weight} –∫–≥\n"
        if checkin.sleep_hours:
            response += f"‚Ä¢ –°–æ–Ω: {checkin.sleep_hours} —á–∞—Å–æ–≤\n"
        if checkin.mood:
            mood_emoji = {"good": "üòä", "normal": "üòê", "bad": "üòî"}.get(checkin.mood, "üòê")
            response += f"‚Ä¢ –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {mood_emoji}\n"
        response += "\n"
    
    response += "**üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
    response += f"‚Ä¢ –®–∞–≥–∏: {checkin.steps:,} / 8,000 üéØ\n" if checkin.steps else "‚Ä¢ –®–∞–≥–∏: –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ\n"
    response += f"‚Ä¢ –í–æ–¥–∞: {checkin.water_ml/1000:.1f}–ª / 2–ª üíß\n" if checkin.water_ml else "‚Ä¢ –í–æ–¥–∞: –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ\n"
    response += "\n"
    
    response += "**üçΩ –ü–∏—Ç–∞–Ω–∏–µ:**\n"
    meals_recorded = []
    if checkin.breakfast_photo:
        meals_recorded.append("–ó–∞–≤—Ç—Ä–∞–∫ ‚úÖ")
    if checkin.lunch_photo:
        meals_recorded.append("–û–±–µ–¥ ‚úÖ")
    if checkin.dinner_photo:
        meals_recorded.append("–£–∂–∏–Ω ‚úÖ")
    if checkin.snack_photo:
        meals_recorded.append("–ü–µ—Ä–µ–∫—É—Å ‚úÖ")
    
    if meals_recorded:
        response += "‚Ä¢ " + ", ".join(meals_recorded) + "\n"
    else:
        response += "‚Ä¢ –§–æ—Ç–æ –µ–¥—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"
    
    if checkin.notes:
        response += f"\n**üìù –ó–∞–º–µ—Ç–∫–∏:**\n{checkin.notes}\n"
    
    await callback.message.answer(response, parse_mode="Markdown")

@router.callback_query(F.data == "checkin_history")
async def show_checkin_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–µ–∫-–∏–Ω–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    await callback.answer()
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        week_ago = datetime.now() - timedelta(days=7)
        result = await session.execute(
            select(CheckIn).where(
                and_(
                    CheckIn.user_id == user.id,
                    CheckIn.date >= week_ago
                )
            ).order_by(CheckIn.date.desc())
        )
        checkins = result.scalars().all()
    
    if not checkins:
        await callback.message.answer(
            "üìà **–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é**\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∞—Ç—å —á–µ–∫-–∏–Ω—ã!",
            parse_mode="Markdown"
        )
        return
    
    response = "üìà **–ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π**\n\n"
    
    for checkin in checkins:
        date_str = checkin.date.strftime('%d.%m')
        response += f"**{date_str}:**"
        
        if checkin.weight:
            response += f" {checkin.weight}–∫–≥"
        if checkin.steps:
            response += f" | {checkin.steps//1000}k —à–∞–≥–æ–≤"
        if checkin.water_ml:
            response += f" | {checkin.water_ml/1000:.1f}–ª"
        
        response += "\n"
    
    weights = [c.weight for c in checkins if c.weight]
    if len(weights) > 1:
        weight_change = weights[0] - weights[-1]
        response += f"\n**–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞:** {weight_change:+.1f} –∫–≥"
    
    await callback.message.answer(response, parse_mode="Markdown")

# ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ============
@router.callback_query(F.data == "start_checkin")
async def start_checkin_from_reminder(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —á–µ–∫-–∏–Ω –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.answer()
    await checkin_menu(callback.message)

@router.callback_query(F.data == "remind_later")
async def remind_later(callback: CallbackQuery):
    """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    await callback.answer("‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ!")
    await callback.message.edit_text(
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkin –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
    )

@router.callback_query(F.data == "disable_reminders")
async def disable_reminders(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer()
    await callback.message.edit_text(
        "üîï –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–ü–æ–∫–∞ —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å."
    )