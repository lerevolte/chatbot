from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Union
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, time
from sqlalchemy import select
from sqlalchemy.orm.attributes import flag_modified
import logging
import re # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

from database.models import User
from database.connection import get_session
from bot.services.fitness_tracker_integration import FitnessIntegrationService
from bot.services.smart_reminder import SmartReminderService

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
class SettingsStates(StatesGroup):
    timezone = State()
    morning_reminder_time = State()
    evening_reminder_time = State()
    google_fit_auth = State()


async def _display_reminder_settings(target: Union[Message, CallbackQuery]):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è
    –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ callback-–∑–∞–ø—Ä–æ—Å—ã.
    """
    user_id = target.from_user.id
    
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user or not user.onboarding_completed:
            text = "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            chat_id = target.chat.id if isinstance(target, Message) else target.message.chat.id
            await target.bot.send_message(chat_id, text)
            if isinstance(target, CallbackQuery):
                await target.answer()
            return

        settings = user.reminder_settings or {}
        timezone = user.timezone or "UTC"
        style = user.reminder_style or "friendly"
        all_disabled = settings.get("all_disabled", False)
        water_reminders_on = settings.get("water_reminders", True) and not all_disabled

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
        if all_disabled:
            toggle_all_button = InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="enable_all_reminders"
            )
        else:
            toggle_all_button = InlineKeyboardButton(
                text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                callback_data="disable_all_reminders"
            )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}", callback_data="set_timezone")],
            [
                InlineKeyboardButton(text="üåÖ –£—Ç—Ä–æ: " + settings.get('morning_time', '08:00'), callback_data="set_morning_time"),
                InlineKeyboardButton(text="üåô –í–µ—á–µ—Ä: " + settings.get('evening_time', '20:00'), callback_data="set_evening_time")
            ],
            [InlineKeyboardButton(text=f"üí¨ –°—Ç–∏–ª—å: {style.capitalize()}", callback_data="set_reminder_style")],
            [InlineKeyboardButton(
                text=f"üíß –í–æ–¥–∞: {'‚úÖ –í–∫–ª' if water_reminders_on else '‚ùå –í—ã–∫–ª'}",
                callback_data="toggle_water_reminders"
            )],
            [toggle_all_button],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")] # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
        ])
        
        text = "‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
        style_descriptions = {
            "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π - –º—è–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ",
            "motivational": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "strict": "–°—Ç—Ä–æ–≥–∏–π - —á–µ—Ç–∫–∏–µ –∏ –ø–æ –¥–µ–ª—É"
        }
        text += f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.\n\n"
        text += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: _{style_descriptions.get(style, '')}_"
        
        if isinstance(target, CallbackQuery):
            try:
                await target.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                await target.answer()
            except Exception as e:
                logger.debug(f"Could not edit message: {e}")
        else:
            await target.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# ============ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ============
@router.message(Command("integrations"))
async def integrations_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        connected = user.connected_services or []
        keyboard_buttons = []
        if "google_fit" in connected:
            keyboard_buttons.append([
                InlineKeyboardButton(text="‚úÖ Google Fit (–ø–æ–¥–∫–ª—é—á–µ–Ω)", callback_data="sync_google_fit"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="disconnect_google_fit")
            ])
        else:
            keyboard_buttons.append([InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Fit", callback_data="connect_google_fit")])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üçé Apple Health (—Å–∫–æ—Ä–æ)", callback_data="coming_soon")])
        
        if connected:
            keyboard_buttons.append([InlineKeyboardButton(text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="sync_all")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        text = "üîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏**\n\n"
        text += "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ —à–∞–≥–∞—Ö, –≤–µ—Å–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "connect_google_fit")
async def connect_google_fit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Fit"""
    await callback.answer()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç OAuth flow
    await callback.message.answer(
        "üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Fit**\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Fit:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ–∏—Ç–Ω–µ—Å–∞\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Å—é–¥–∞\n\n"
        "‚ö†Ô∏è –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkin –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."
    )
    
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    # integration_service = FitnessIntegrationService()
    # auth_url = await integration_service.connect_service(callback.from_user.id, "google_fit")
    # await callback.message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}")
    # await state.set_state(SettingsStates.google_fit_auth)

@router.callback_query(F.data == "sync_google_fit")
async def sync_google_fit(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Fit"""
    await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
    
    integration_service = FitnessIntegrationService()
    success = await integration_service.sync_all(callback.from_user.id)
    
    if success.get("google_fit"):
        await callback.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Google Fit —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            "‚Ä¢ –®–∞–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–∞–ª–æ—Ä–∏–∏"
        )
    else:
        await callback.message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–µ—Ä–≤–∏—Å."
        )

@router.callback_query(F.data == "sync_all")
async def sync_all_services(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    integration_service = FitnessIntegrationService()
    results = await integration_service.sync_all(callback.from_user.id)
    
    if any(results.values()):
        success_services = [s for s, status in results.items() if status]
        text = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        text += "–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑:\n"
        for service in success_services:
            text += f"‚Ä¢ {service.replace('_', ' ').title()}\n"
    else:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    
    await callback.message.answer(text)

@router.callback_query(F.data == "disconnect_google_fit")
async def disconnect_google_fit(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Google Fit"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disconnect_gf"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_disconnect")
        ]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å Google Fit?\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=keyboard
    )

# ============ –ù–ê–°–¢–†–û–ô–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ============
@router.message(Command("reminder_settings"))
async def reminder_settings_menu(message: Message):
    await _display_reminder_settings(message)

@router.callback_query(F.data == "back_to_reminder_settings")
async def back_to_reminder_settings(callback: CallbackQuery):
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "set_timezone")
async def set_timezone(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="UTC+0 (–õ–æ–Ω–¥–æ–Ω)", callback_data="tz_UTC"),
            InlineKeyboardButton(text="UTC+1 (–ë–µ—Ä–ª–∏–Ω)", callback_data="tz_UTC+1")
        ],
        [
            InlineKeyboardButton(text="UTC+2 (–ö–∏–µ–≤)", callback_data="tz_UTC+2"),
            InlineKeyboardButton(text="UTC+3 (–ú–æ—Å–∫–≤–∞)", callback_data="tz_UTC+3")
        ],
        [
            InlineKeyboardButton(text="UTC+4 (–î—É–±–∞–π)", callback_data="tz_UTC+4"),
            InlineKeyboardButton(text="UTC+5 (–¢–∞—à–∫–µ–Ω—Ç)", callback_data="tz_UTC+5")
        ],
        [
            InlineKeyboardButton(text="UTC+6 (–ê–ª–º–∞—Ç—ã)", callback_data="tz_UTC+6"),
            InlineKeyboardButton(text="UTC+7 (–ë–∞–Ω–≥–∫–æ–∫)", callback_data="tz_UTC+7")
        ],
        [
            InlineKeyboardButton(text="UTC+8 (–ü–µ–∫–∏–Ω)", callback_data="tz_UTC+8"),
            InlineKeyboardButton(text="UTC+9 (–¢–æ–∫–∏–æ)", callback_data="tz_UTC+9")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reminder_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("tz_"))
async def save_timezone(callback: CallbackQuery):
    timezone = callback.data.replace("tz_", "")
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if user:
            user.timezone = timezone
            await session.commit()
    await callback.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}")
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "set_morning_time")
async def set_morning_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:30)",
    )
    await state.set_state(SettingsStates.morning_reminder_time)

@router.message(SettingsStates.morning_reminder_time)
async def save_morning_time(message: Message, state: FSMContext):
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        cleaned_text = message.text.strip()
        match = re.fullmatch(r"(\d{1,2}):(\d{2})", cleaned_text)

        if not match:
            raise ValueError(f"Input '{cleaned_text}' does not match HH:MM format")

        hour, minute = int(match.group(1)), int(match.group(2))
        
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError(f"Time out of range: {hour}:{minute}")

        time_str = f"{hour:02d}:{minute:02d}"
        async with get_session() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.reminder_settings = user.reminder_settings or {}
                user.reminder_settings["morning_time"] = time_str
                flag_modified(user, "reminder_settings")
                await session.commit()
        await message.answer(f"‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
        await state.clear()
        await _display_reminder_settings(message)
    except ValueError as e:
        logger.warning(f"Invalid time format from user {message.from_user.id}: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).")
    except Exception as e:
        logger.error(f"Unexpected error in save_morning_time: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.callback_query(F.data == "set_evening_time")
async def set_evening_time(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20:00)")
    await state.set_state(SettingsStates.evening_reminder_time)

@router.message(SettingsStates.evening_reminder_time)
async def save_evening_time(message: Message, state: FSMContext):
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        cleaned_text = message.text.strip()
        match = re.fullmatch(r"(\d{1,2}):(\d{2})", cleaned_text)

        if not match:
            raise ValueError(f"Input '{cleaned_text}' does not match HH:MM format")
            
        hour, minute = int(match.group(1)), int(match.group(2))

        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError(f"Time out of range: {hour}:{minute}")

        time_str = f"{hour:02d}:{minute:02d}"
        async with get_session() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if user:
                user.reminder_settings = user.reminder_settings or {}
                user.reminder_settings["evening_time"] = time_str
                flag_modified(user, "reminder_settings")
                await session.commit()
        await message.answer(f"‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
        await state.clear()
        await _display_reminder_settings(message)
    except ValueError as e:
        logger.warning(f"Invalid time format from user {message.from_user.id}: {e}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00).")
    except Exception as e:
        logger.error(f"Unexpected error in save_evening_time: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.callback_query(F.data == "set_reminder_style")
async def set_reminder_style(callback: CallbackQuery):
    await callback.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style_friendly")],
        [InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π", callback_data="style_motivational")],
        [InlineKeyboardButton(text="üìä –°—Ç—Ä–æ–≥–∏–π", callback_data="style_strict")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reminder_settings")]
    ])
    await callback.message.edit_text("üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**", reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data.startswith("style_"))
async def save_reminder_style(callback: CallbackQuery):
    style = callback.data.replace("style_", "")
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if user:
            user.reminder_style = style
            await session.commit()
    await callback.answer(f"‚úÖ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω")
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "toggle_water_reminders")
async def toggle_water_reminders(callback: CallbackQuery):
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if user:
            user.reminder_settings = user.reminder_settings or {}
            current_status = user.reminder_settings.get("water_reminders", True)
            user.reminder_settings["water_reminders"] = not current_status
            flag_modified(user, "reminder_settings")
            await session.commit()
            await callback.answer(f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ {'–≤—ã–∫–ª—é—á–µ–Ω—ã' if current_status else '–≤–∫–ª—é—á–µ–Ω—ã'}")
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "disable_all_reminders")
async def disable_all_reminders(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disable_all"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_reminder_settings")
        ]
    ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disable_all"), InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_reminder_settings")]])
    await callback.message.edit_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "confirm_disable_all")
async def confirm_disable_all_reminders(callback: CallbackQuery):
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if user:
            user.reminder_settings = user.reminder_settings or {}
            user.reminder_settings["all_disabled"] = True
            flag_modified(user, "reminder_settings")
            await session.commit()
    await callback.answer("üîï –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", show_alert=True)
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "enable_all_reminders")
async def enable_all_reminders(callback: CallbackQuery):
    async with get_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if user:
            user.reminder_settings = user.reminder_settings or {}
            user.reminder_settings["all_disabled"] = False
            flag_modified(user, "reminder_settings")
            await session.commit()
    await callback.answer("‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã", show_alert=True)
    await _display_reminder_settings(callback)

@router.callback_query(F.data == "coming_soon")
async def coming_soon(callback: CallbackQuery):
    await callback.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)