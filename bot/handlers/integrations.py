from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, time
from sqlalchemy import select
import logging

from database.models import User
from database.connection import get_session
from bot.services.fitness_tracker_integration import FitnessIntegrationService
from bot.services.smart_reminder import SmartReminderService

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
class SettingsStates(StatesGroup):
    timezone = State()
    morning_reminder_time = State()
    evening_reminder_time = State()
    google_fit_auth = State()

# ============ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ============
@router.message(Command("integrations"))
async def integrations_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        connected = user.connected_services or []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        # Google Fit
        if "google_fit" in connected:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="‚úÖ Google Fit (–ø–æ–¥–∫–ª—é—á–µ–Ω)",
                    callback_data="sync_google_fit"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                    callback_data="disconnect_google_fit"
                )
            ])
        else:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Fit",
                    callback_data="connect_google_fit"
                )
            ])
        
        # Apple Health (–∑–∞–≥–ª—É—à–∫–∞)
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üçé Apple Health (—Å–∫–æ—Ä–æ)",
                callback_data="coming_soon"
            )
        ])
        
        # Fitbit (–∑–∞–≥–ª—É—à–∫–∞)
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚åö Fitbit (—Å–∫–æ—Ä–æ)",
                callback_data="coming_soon"
            )
        ])
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö
        if connected:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ",
                    callback_data="sync_all"
                )
            ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        text = "üîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏**\n\n"
        
        if connected:
            text += "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:\n"
            for service in connected:
                text += f"‚Ä¢ {service.replace('_', ' ').title()}\n"
            text += "\n–î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å."
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.\n"
            text += "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!"
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "connect_google_fit")
async def connect_google_fit(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Fit"""
    await callback.answer()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç OAuth flow
    await callback.message.answer(
        "üîó **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Fit**\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Fit:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π Google –∞–∫–∫–∞—É–Ω—Ç\n"
        "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ñ–∏—Ç–Ω–µ—Å–∞\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —Å—é–¥–∞\n\n"
        "‚ö†Ô∏è –í –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /checkin –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."
    )
    
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    # integration_service = FitnessIntegrationService()
    # auth_url = await integration_service.connect_service(callback.from_user.id, "google_fit")
    # await callback.message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {auth_url}")
    # await state.set_state(SettingsStates.google_fit_auth)

@router.callback_query(F.data == "sync_google_fit")
async def sync_google_fit(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Fit"""
    await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
    
    integration_service = FitnessIntegrationService()
    success = await integration_service.sync_all(callback.from_user.id)
    
    if success.get("google_fit"):
        await callback.message.answer(
            "‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Google Fit —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
            "–û–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
            "‚Ä¢ –®–∞–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ\n"
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∫–∞–ª–æ—Ä–∏–∏"
        )
    else:
        await callback.message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–µ—Ä–≤–∏—Å."
        )

@router.callback_query(F.data == "sync_all")
async def sync_all_services(callback: CallbackQuery):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    await callback.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    integration_service = FitnessIntegrationService()
    results = await integration_service.sync_all(callback.from_user.id)
    
    if any(results.values()):
        success_services = [s for s, status in results.items() if status]
        text = "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        text += "–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑:\n"
        for service in success_services:
            text += f"‚Ä¢ {service.replace('_', ' ').title()}\n"
    else:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."
    
    await callback.message.answer(text)

@router.callback_query(F.data == "disconnect_google_fit")
async def disconnect_google_fit(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Google Fit"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disconnect_gf"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_disconnect")
        ]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å Google Fit?\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=keyboard
    )

# ============ –ù–ê–°–¢–†–û–ô–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ============
@router.message(Command("reminder_settings"))
async def reminder_settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        settings = user.reminder_settings or {}
        timezone = user.timezone or "UTC"
        style = user.reminder_style or "friendly"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}", callback_data="set_timezone"),
            ],
            [
                InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="set_morning_time"),
                InlineKeyboardButton(text="üåô –í—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="set_evening_time")
            ],
            [
                InlineKeyboardButton(text=f"üí¨ –°—Ç–∏–ª—å: {style}", callback_data="set_reminder_style"),
            ],
            [
                InlineKeyboardButton(text="üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ", callback_data="toggle_water_reminders"),
                InlineKeyboardButton(text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="disable_all_reminders")
            ]
        ])
        
        text = "‚è∞ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
        text += f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
        text += f"üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ: {settings.get('morning_time', '08:00')}\n"
        text += f"üåô –í–µ—á–µ—Ä–Ω–µ–µ: {settings.get('evening_time', '20:00')}\n"
        text += f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ: {'‚úÖ –í–∫–ª' if settings.get('water_reminders', True) else '‚ùå –í—ã–∫–ª'}\n"
        text += f"üí¨ –°—Ç–∏–ª—å: {style}\n\n"
        
        style_descriptions = {
            "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π - –º—è–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "motivational": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "strict": "–°—Ç—Ä–æ–≥–∏–π - —á–µ—Ç–∫–∏–µ –∏ –∫—Ä–∞—Ç–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        }
        text += f"_{style_descriptions.get(style, '')}_"
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "set_timezone")
async def set_timezone(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="UTC+0 (–õ–æ–Ω–¥–æ–Ω)", callback_data="tz_UTC"),
            InlineKeyboardButton(text="UTC+1 (–ë–µ—Ä–ª–∏–Ω)", callback_data="tz_UTC+1")
        ],
        [
            InlineKeyboardButton(text="UTC+2 (–ö–∏–µ–≤)", callback_data="tz_UTC+2"),
            InlineKeyboardButton(text="UTC+3 (–ú–æ—Å–∫–≤–∞)", callback_data="tz_UTC+3")
        ],
        [
            InlineKeyboardButton(text="UTC+4 (–î—É–±–∞–π)", callback_data="tz_UTC+4"),
            InlineKeyboardButton(text="UTC+5 (–¢–∞—à–∫–µ–Ω—Ç)", callback_data="tz_UTC+5")
        ],
        [
            InlineKeyboardButton(text="UTC+6 (–ê–ª–º–∞—Ç—ã)", callback_data="tz_UTC+6"),
            InlineKeyboardButton(text="UTC+7 (–ë–∞–Ω–≥–∫–æ–∫)", callback_data="tz_UTC+7")
        ],
        [
            InlineKeyboardButton(text="UTC+8 (–ü–µ–∫–∏–Ω)", callback_data="tz_UTC+8"),
            InlineKeyboardButton(text="UTC+9 (–¢–æ–∫–∏–æ)", callback_data="tz_UTC+9")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reminder_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("tz_"))
async def save_timezone(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    timezone = callback.data.replace("tz_", "")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        user.timezone = timezone
        await session.commit()
    
    await callback.answer(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    # reminder_service = SmartReminderService(callback.bot)
    # await reminder_service.set_user_timezone(callback.from_user.id, timezone)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    await reminder_settings_menu(callback.message)

@router.callback_query(F.data == "set_morning_time")
async def set_morning_time(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.answer()
    
    await callback.message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await state.set_state(SettingsStates.morning_reminder_time)

@router.message(SettingsStates.morning_reminder_time)
async def save_morning_time(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_parts = message.text.split(":")
        hour = int(time_parts[0])
        minute = int(time_parts[1])
        
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            time_str = f"{hour:02d}:{minute:02d}"
            
            async with get_session() as session:
                result = await session.execute(
                    select(User).where(User.telegram_id == message.from_user.id)
                )
                user = result.scalar_one_or_none()
                
                if not user.reminder_settings:
                    user.reminder_settings = {}
                user.reminder_settings["morning_time"] = time_str
                await session.commit()
            
            await message.answer(f"‚úÖ –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ
            # reminder_service = SmartReminderService(message.bot)
            # await reminder_service.set_custom_reminder_time(
            #     message.from_user.id, "morning", time(hour, minute)
            # )
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)")
        return
    
    await state.clear()

@router.callback_query(F.data == "set_reminder_style")
async def set_reminder_style(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data="style_friendly")
        ],
        [
            InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π", callback_data="style_motivational")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç—Ä–æ–≥–∏–π", callback_data="style_strict")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reminder_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "üí¨ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n\n"
        "üòä **–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π** - –º—è–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "üí™ **–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π** - –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–µ\n"
        "üìä **–°—Ç—Ä–æ–≥–∏–π** - —á–µ—Ç–∫–∏–µ –∏ –ø–æ –¥–µ–ª—É\n",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("style_"))
async def save_reminder_style(callback: CallbackQuery):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    style = callback.data.replace("style_", "")
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        user.reminder_style = style
        await session.commit()
    
    style_names = {
        "friendly": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        "motivational": "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π",
        "strict": "–°—Ç—Ä–æ–≥–∏–π"
    }
    
    await callback.answer(f"‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style_names.get(style, style)}")
    await reminder_settings_menu(callback.message)

@router.callback_query(F.data == "toggle_water_reminders")
async def toggle_water_reminders(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–æ–¥–µ"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user.reminder_settings:
            user.reminder_settings = {}
        
        current = user.reminder_settings.get("water_reminders", True)
        user.reminder_settings["water_reminders"] = not current
        await session.commit()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if not current else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ {status}")
    
    await reminder_settings_menu(callback.message)

@router.callback_query(F.data == "disable_all_reminders")
async def disable_all_reminders(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="confirm_disable_all"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_reminder_settings")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n"
        "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–∫-–∏–Ω–µ\n"
        "‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ\n",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "confirm_disable_all")
async def confirm_disable_all_reminders(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user.reminder_settings:
            user.reminder_settings = {}
        
        user.reminder_settings["all_disabled"] = True
        user.reminder_settings["water_reminders"] = False
        await session.commit()
    
    await callback.answer("‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ
    # reminder_service = SmartReminderService(callback.bot)
    # await reminder_service.disable_reminders(callback.from_user.id)
    
    await callback.message.edit_text(
        "üîï –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ /reminder_settings"
    )

@router.callback_query(F.data == "back_to_reminder_settings")
async def back_to_reminder_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await callback.answer()
    await reminder_settings_menu(callback.message)

@router.callback_query(F.data == "coming_soon")
async def coming_soon(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    await callback.answer("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)