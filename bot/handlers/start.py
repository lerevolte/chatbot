from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from bot.states.onboarding import OnboardingStates
from database.models import User, Gender, Goal, ActivityLevel, MealStyle
from database.connection import get_session
from bot.utils.calculations import calculate_calories_and_macros

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_gender_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π")],
            [KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_goal_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî• –ü–æ—Ö—É–¥–µ—Ç—å")],
            [KeyboardButton(text="üí™ –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É")],
            [KeyboardButton(text="‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–µ—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_activity_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü™ë –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π (–æ—Ñ–∏—Å, –º–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è)")],
            [KeyboardButton(text="üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1-3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏/–Ω–µ–¥)")],
            [KeyboardButton(text="üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è (3-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥)")],
            [KeyboardButton(text="‚ö° –ê–∫—Ç–∏–≤–Ω—ã–π (6-7 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫/–Ω–µ–¥)")],
            [KeyboardButton(text="üî• –û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π (—Å–ø–æ—Ä—Ç—Å–º–µ–Ω)")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_meal_count_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="3Ô∏è‚É£ 3 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")],
            [KeyboardButton(text="4Ô∏è‚É£ 4 –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_meal_style_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëÅ –ù–∞ –≥–ª–∞–∑ (–ø—Ä–æ—â–µ)")],
            [KeyboardButton(text="‚öñÔ∏è –¢–æ—á–Ω—ã–µ –≥—Ä–∞–º–º–æ–≤–∫–∏")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_budget_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –≠–∫–æ–Ω–æ–º–Ω—ã–π")],
            [KeyboardButton(text="üí≥ –°—Ä–µ–¥–Ω–∏–π")],
            [KeyboardButton(text="üíé –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def get_skip_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –•–µ–Ω–¥–ª–µ—Ä—ã
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user and user.onboarding_completed:
            await message.answer(
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
                "üìä /profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
                "üçΩ /meal_plan - –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
                "‚úÖ /checkin - –ß–µ–∫-–∏–Ω\n"
                "üí≥ /subscription - –ü–æ–¥–ø–∏—Å–∫–∞"
            )
        else:
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
                "–ó–∞ 90 –¥–Ω–µ–π –º—ã –≤–º–µ—Å—Ç–µ:\n"
                "‚úÖ –°–Ω–∏–∑–∏–º –≤–µ—Å –∏–ª–∏ –Ω–∞–±–µ—Ä–µ–º –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É\n"
                "‚úÖ –°–æ–∑–¥–∞–¥–∏–º –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏\n"
                "‚úÖ –ù–∞—É—á–∏–º—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Ç–∞—Ç—å—Å—è\n\n"
                "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.\n\n"
                "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?",
                reply_markup=get_gender_keyboard()
            )
            await state.set_state(OnboardingStates.gender)

@router.message(OnboardingStates.gender)
async def process_gender(message: Message, state: FSMContext):
    if "–ú—É–∂—Å–∫–æ–π" in message.text:
        gender = Gender.MALE
    elif "–ñ–µ–Ω—Å–∫–∏–π" in message.text:
        gender = Gender.FEMALE
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                           reply_markup=get_gender_keyboard())
        return
    
    await state.update_data(gender=gender.value)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ)")
    await state.set_state(OnboardingStates.age)

@router.message(OnboardingStates.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 14 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (14-100)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(age=age)
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç –≤ —Å–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175)")
    await state.set_state(OnboardingStates.height)

@router.message(OnboardingStates.height)
async def process_height(message: Message, state: FSMContext):
    try:
        height = float(message.text.replace(',', '.'))
        if height < 100 or height > 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º (100-250)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(height=height)
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75.5)")
    await state.set_state(OnboardingStates.current_weight)

@router.message(OnboardingStates.current_weight)
async def process_current_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (30-300)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(current_weight=weight)
    await message.answer("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?", reply_markup=get_goal_keyboard())
    await state.set_state(OnboardingStates.goal)

@router.message(OnboardingStates.goal)
async def process_goal(message: Message, state: FSMContext):
    if "–ü–æ—Ö—É–¥–µ—Ç—å" in message.text:
        goal = Goal.LOSE_WEIGHT
    elif "–ù–∞–±—Ä–∞—Ç—å" in message.text:
        goal = Goal.GAIN_MUSCLE
    elif "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å" in message.text:
        goal = Goal.MAINTAIN
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=get_goal_keyboard())
        return
    
    await state.update_data(goal=goal.value)
    
    if goal != Goal.MAINTAIN:
        await message.answer("–ö–∞–∫–æ–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å —Ç—ã —Ö–æ—á–µ—à—å –¥–æ—Å—Ç–∏—á—å? (–≤ –∫–≥)")
        await state.set_state(OnboardingStates.target_weight)
    else:
        data = await state.get_data()
        await state.update_data(target_weight=data['current_weight'])
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", 
                           reply_markup=get_activity_keyboard())
        await state.set_state(OnboardingStates.activity_level)

@router.message(OnboardingStates.target_weight)
async def process_target_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight < 30 or weight > 300:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥ (30-300)")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return
    
    await state.update_data(target_weight=weight)
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", 
                       reply_markup=get_activity_keyboard())
    await state.set_state(OnboardingStates.activity_level)

@router.message(OnboardingStates.activity_level)
async def process_activity(message: Message, state: FSMContext):
    activity_map = {
        "–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π": ActivityLevel.SEDENTARY,
        "–õ–µ–≥–∫–∞—è": ActivityLevel.LIGHT,
        "–£–º–µ—Ä–µ–Ω–Ω–∞—è": ActivityLevel.MODERATE,
        "–ê–∫—Ç–∏–≤–Ω—ã–π": ActivityLevel.ACTIVE,
        "–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π": ActivityLevel.VERY_ACTIVE
    }
    
    activity = None
    for key, value in activity_map.items():
        if key in message.text:
            activity = value
            break
    
    if not activity:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=get_activity_keyboard())
        return
    
    await state.update_data(activity_level=activity.value)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –¥–µ–Ω—å —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –µ—Å—Ç—å?",
                       reply_markup=get_meal_count_keyboard())
    await state.set_state(OnboardingStates.meal_count)

@router.message(OnboardingStates.meal_count)
async def process_meal_count(message: Message, state: FSMContext):
    if "3" in message.text:
        meal_count = 3
    elif "4" in message.text:
        meal_count = 4
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=get_meal_count_keyboard())
        return
    
    await state.update_data(meal_count=meal_count)
    await message.answer("–ö–∞–∫ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–∏—Ç–∞–Ω–∏–µ–º?",
                       reply_markup=get_meal_style_keyboard())
    await state.set_state(OnboardingStates.meal_style)

@router.message(OnboardingStates.meal_style)
async def process_meal_style(message: Message, state: FSMContext):
    if "–≥–ª–∞–∑" in message.text:
        style = MealStyle.VISUAL
    elif "–≥—Ä–∞–º–º–æ–≤–∫–∏" in message.text:
        style = MealStyle.PRECISE
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=get_meal_style_keyboard())
        return
    
    await state.update_data(meal_style=style.value)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å?\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª–∞–∫—Ç–æ–∑–∞, –≥–ª—é—Ç–µ–Ω, –æ—Ä–µ—Ö–∏)\n\n"
        "–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
        reply_markup=get_skip_keyboard()
    )
    await state.set_state(OnboardingStates.allergies)

@router.message(OnboardingStates.allergies)
async def process_allergies(message: Message, state: FSMContext):
    if "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" not in message.text:
        allergies = [a.strip() for a in message.text.split(',')]
        await state.update_data(allergies=allergies)
    else:
        await state.update_data(allergies=[])
    
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ?",
                       reply_markup=get_budget_keyboard())
    await state.set_state(OnboardingStates.budget)

@router.message(OnboardingStates.budget)
async def process_budget(message: Message, state: FSMContext):
    budget_map = {
        "–≠–∫–æ–Ω–æ–º–Ω—ã–π": "low",
        "–°—Ä–µ–¥–Ω–∏–π": "medium",
        "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π": "high"
    }
    
    budget = None
    for key, value in budget_map.items():
        if key in message.text:
            budget = value
            break
    
    if not budget:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                           reply_markup=get_budget_keyboard())
        return
    
    await state.update_data(budget=budget)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
    await save_user_and_calculate(message, state)

async def save_user_and_calculate(message: Message, state: FSMContext):
    data = await state.get_data()
    
    async with get_session() as session:
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await session.get(User, {"telegram_id": message.from_user.id})
        if not user:
            user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name
            )
            session.add(user)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.gender = Gender(data['gender'])
        user.age = data['age']
        user.height = data['height']
        user.current_weight = data['current_weight']
        user.target_weight = data['target_weight']
        user.goal = Goal(data['goal'])
        user.activity_level = ActivityLevel(data['activity_level'])
        user.meal_count = data['meal_count']
        user.meal_style = MealStyle(data['meal_style'])
        user.food_preferences = {
            'allergies': data.get('allergies', []),
            'exclude': [],
            'cuisines': []
        }
        user.budget = data['budget']
        user.onboarding_completed = True
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        calories, protein, fats, carbs = calculate_calories_and_macros(
            gender=user.gender,
            age=user.age,
            height=user.height,
            weight=user.current_weight,
            activity_level=user.activity_level,
            goal=user.goal
        )
        
        user.daily_calories = calories
        user.daily_protein = protein
        user.daily_fats = fats
        user.daily_carbs = carbs
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–∏–∞–ª
        user.trial_started_at = datetime.utcnow()
        user.is_premium = True
        
        await session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_text = (
        "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≥–æ—Ç–æ–≤!\n\n"
        f"üìä –¢–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"‚Ä¢ –ë–µ–ª–∫–∏: {protein}–≥\n"
        f"‚Ä¢ –ñ–∏—Ä—ã: {fats}–≥\n"
        f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {carbs}–≥\n\n"
        f"üéØ –¶–µ–ª—å: {goal_text[user.goal]}\n"
        f"‚öñÔ∏è –¢–µ–∫—É—â–∏–π –≤–µ—Å: {user.current_weight} –∫–≥\n"
        f"üéØ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user.target_weight} –∫–≥\n\n"
        "‚úÖ –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 7 –¥–Ω–µ–π!\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìä /profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üçΩ /meal_plan - –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        "‚úÖ /checkin - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω\n"
        "üí≥ /subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
    )
    
    await message.answer(result_text, reply_markup=ReplyKeyboardRemove())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
@router.message(Command("reset"))
async def reset_onboarding(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥"""
    await state.clear()
    
    async with get_session() as session:
        from sqlalchemy import select
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.onboarding_completed = False
            await session.commit()
    
    await message.answer(
        "–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ!\n\n"
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–æ–ª?",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(OnboardingStates.gender)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=ReplyKeyboardRemove()
    )