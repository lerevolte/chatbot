from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, PreCheckoutQuery, ContentType
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from datetime import datetime, timedelta
import logging

from database.models import User
from database.payment_models import SubscriptionPlan, PromoType
from database.connection import get_session
from bot.services.payment_service import PaymentService

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
class PromoCodeStates(StatesGroup):
    entering_code = State()
    creating_partner = State()

# ============ –ö–û–ú–ê–ù–î–ê –ü–û–î–ü–ò–°–ö–ò ============
@router.message(Command("subscription"))
async def subscription_menu(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π
    payment_service = PaymentService(message.bot)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    status = await payment_service.check_subscription_status(message.from_user.id)
    
    if status["status"] == "active":
        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payment_history"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_subscription")
            ],
            [
                InlineKeyboardButton(text="üéÅ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="partner_program")
            ]
        ])
        
        text = f"‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞**\n\n"
        text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
        text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status['days_left']}\n"
        text += f"üí≥ –ü–ª–∞–Ω: {status['plan'].replace('_', ' ').title()}\n"
        
        if status.get('auto_renew'):
            text += f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
        else:
            text += f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ\n"
        
        if status.get('features'):
            text += "\n**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
            feature_names = {
                "meal_plans": "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è",
                "ai_coach": "‚Ä¢ AI-–∫–æ—É—á –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ",
                "integrations": "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏",
                "priority_support": "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
                "custom_programs": "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            }
            for feature, enabled in status['features'].items():
                if enabled:
                    text += f"{feature_names.get(feature, feature)}\n"
    
    elif status["status"] == "trial":
        # –¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_plans")
            ],
            [
                InlineKeyboardButton(text="üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")
            ]
        ])
        
        text = f"üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥**\n\n"
        text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {status['expires_at'].strftime('%d.%m.%Y')}\n"
        text += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {status['days_left']}\n\n"
        text += "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
        text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!"
    
    else:
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", callback_data="show_plans")
            ],
            [
                InlineKeyboardButton(text="üéÅ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo"),
                InlineKeyboardButton(text="‚ùì –ß—Ç–æ –¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞?", callback_data="subscription_info")
            ]
        ])
        
        text = "‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞**\n\n"
        text += "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n\n"
        text += "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è —Å AI\n"
        text += "‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã –∏ –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n"
        text += "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–∫–µ—Ä–∞–º–∏\n"
        text += "‚úÖ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        text += "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# ============ –ü–û–ö–ê–ó –ü–õ–ê–ù–û–í ============
@router.callback_query(F.data == "show_plans")
async def show_subscription_plans(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
    await state.update_data(currency="RUB")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        # –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        [
            InlineKeyboardButton(
                text="üìÖ –ú–µ—Å—è—Ü - 299‚ÇΩ",
                callback_data="buy_monthly"
            )
        ],
        # –ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–ø–æ–ø—É–ª—è—Ä–Ω–∞—è)
        [
            InlineKeyboardButton(
                text="‚≠ê 3 –º–µ—Å—è—Ü–∞ - 699‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 22%)",
                callback_data="buy_quarterly"
            )
        ],
        # –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        [
            InlineKeyboardButton(
                text="üéØ –ì–æ–¥ - 1999‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 44%)",
                callback_data="buy_yearly"
            )
        ],
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        [
            InlineKeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo"),
            InlineKeyboardButton(text="üí± –î—Ä—É–≥–∞—è –≤–∞–ª—é—Ç–∞", callback_data="change_currency")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")
        ]
    ])
    
    text = "üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
    
    text += "**üìÖ –ú–µ—Å—è—á–Ω–∞—è** - 299‚ÇΩ/–º–µ—Å\n"
    text += "‚Ä¢ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
    text += "‚Ä¢ –ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n"
    text += "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ\n\n"
    
    text += "**‚≠ê 3 –º–µ—Å—è—Ü–∞** - 699‚ÇΩ (233‚ÇΩ/–º–µ—Å)\n"
    text += "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ—Å—è—á–Ω–æ–π\n"
    text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    text += "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 22%\n\n"
    
    text += "**üéØ –ì–æ–¥–æ–≤–∞—è** - 1999‚ÇΩ (167‚ÇΩ/–º–µ—Å)\n"
    text += "‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
    text += "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
    text += "‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–∏–µ—Ç–æ–ª–æ–≥–∞\n"
    text += "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è 44%\n\n"
    
    text += "üí° _–í—Å–µ –ø–ª–∞–Ω—ã –≤–∫–ª—é—á–∞—é—Ç 7 –¥–Ω–µ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞_"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# ============ –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ö–ò ============
@router.callback_query(F.data.startswith("buy_"))
async def process_subscription_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    plan_type = callback.data.replace("buy_", "")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–ª–∞–Ω–æ–≤
    plan_map = {
        "monthly": SubscriptionPlan.MONTHLY,
        "quarterly": SubscriptionPlan.QUARTERLY,
        "yearly": SubscriptionPlan.YEARLY
    }
    
    plan = plan_map.get(plan_type)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω", show_alert=True)
        return
    
    await callback.answer("–°–æ–∑–¥–∞—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å)
    data = await state.get_data()
    promo_code = data.get("promo_code")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    payment_service = PaymentService(callback.bot)
    invoice_link = await payment_service.create_invoice(
        user_id=callback.from_user.id,
        plan=plan,
        promo_code=promo_code
    )
    
    if invoice_link:
        await callback.message.answer(
            "üí≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞–Ω!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –≤—ã—à–µ ‚òùÔ∏è\n\n"
            "_–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Telegram Payments_"
        )
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    
    await state.clear()

# ============ –û–ë–†–ê–ë–û–¢–ö–ê –ü–õ–ê–¢–ï–ñ–ï–ô ============
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    payment_service = PaymentService(pre_checkout_query.bot)
    await payment_service.process_pre_checkout(pre_checkout_query)

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_service = PaymentService(message.bot)
    
    success = await payment_service.process_successful_payment(
        message=message,
        telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id,
        provider_payment_charge_id=message.successful_payment.provider_payment_charge_id
    )
    
    if not success:
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –ø–ª–∞—Ç–µ–∂–∞: "
            f"`{message.successful_payment.telegram_payment_charge_id}`",
            parse_mode="Markdown"
        )

# ============ –ü–†–û–ú–û–ö–û–î–´ ============
@router.callback_query(F.data == "enter_promo")
async def enter_promo_code(callback: CallbackQuery, state: FSMContext):
    """–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback.answer()
    
    await callback.message.answer(
        "üéÅ **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="Markdown"
    )
    await state.set_state(PromoCodeStates.entering_code)

@router.message(PromoCodeStates.entering_code)
async def process_promo_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    payment_service = PaymentService(message.bot)
    promo = await payment_service.validate_promo_code(
        code=code,
        user_id=message.from_user.id,
        plan=SubscriptionPlan.MONTHLY  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
    )
    
    if promo:
        await state.update_data(promo_code=code)
        
        discount_text = ""
        if promo.promo_type == PromoType.DISCOUNT_PERCENT:
            discount_text = f"{int(promo.value)}%"
        elif promo.promo_type == PromoType.DISCOUNT_FIXED:
            discount_text = f"{int(promo.value)}‚ÇΩ"
        
        await message.answer(
            f"‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"–ö–æ–¥: `{code}`\n"
            f"–°–∫–∏–¥–∫–∞: {discount_text}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
            parse_mode="Markdown"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(message)
        await show_subscription_plans(fake_callback, state)
    else:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥**\n\n"
            "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
            parse_mode="Markdown"
        )
    
    await state.set_state(None)

# ============ –ü–ê–†–¢–ù–ï–†–°–ö–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ============
@router.callback_query(F.data == "partner_program")
async def show_partner_program(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥
    payment_service = PaymentService(callback.bot)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéü –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥", callback_data="generate_partner_code")
        ],
        [
            InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="partner_stats"),
            InlineKeyboardButton(text="üí∞ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="partner_withdraw")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")
        ]
    ])
    
    text = "ü§ù **–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
    text += "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
    text += "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
    text += "1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n"
    text += "2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏\n"
    text += "3Ô∏è‚É£ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç —Å–∫–∏–¥–∫—É 20%\n"
    text += "4Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –ø–ª–∞—Ç–µ–∂–∞\n\n"
    text += "**–£—Å–ª–æ–≤–∏—è:**\n"
    text += "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 90 –¥–Ω–µ–π\n"
    text += "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 100 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
    text += "‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –æ—Ç 500‚ÇΩ\n"
    text += "‚Ä¢ –í—ã–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫\n"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "generate_partner_code")
async def generate_partner_code(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –ø—Ä–æ–º–æ–∫–æ–¥"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥...")
    
    payment_service = PaymentService(callback.bot)
    code = await payment_service.generate_partner_promo_code(callback.from_user.id)
    
    if code:
        text = f"‚úÖ **–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n"
        text += f"üéü –ö–æ–¥: `{code}`\n\n"
        text += f"**–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:**\n"
        text += f"_–ü–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É FitnessBot!_\n"
        text += f"_–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–º–æ–∫–æ–¥:_ `{code}`\n"
        text += f"_–ù–∞—á–Ω–∏ –ø—É—Ç—å –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ:_ @YourBotName\n\n"
        text += "üí° –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
        
        await callback.message.answer(text, parse_mode="Markdown")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ============ –ò–°–¢–û–†–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô ============
@router.callback_query(F.data == "payment_history")
async def show_payment_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    await callback.answer()
    
    payment_service = PaymentService(callback.bot)
    payments = await payment_service.get_payment_history(callback.from_user.id)
    
    if not payments:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
        return
    
    text = "üí≥ **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π**\n\n"
    
    for payment in payments[:10]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–ª–∞—Ç–µ–∂–µ–π
        status_emoji = "‚úÖ" if payment.status.value == "success" else "‚ùå"
        text += f"{status_emoji} {payment.created_at.strftime('%d.%m.%Y')} - "
        text += f"{payment.amount} {payment.currency}\n"
        if payment.description:
            text += f"   _{payment.description}_\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

# ============ –û–¢–ú–ï–ù–ê –ü–û–î–ü–ò–°–ö–ò ============
@router.callback_query(F.data == "cancel_subscription")
async def cancel_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel_subscription"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="back_to_subscription")
        ]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è **–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ?\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, "
        "–Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "confirm_cancel_subscription")
async def confirm_cancel_subscription(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    payment_service = PaymentService(callback.bot)
    success = await payment_service.cancel_subscription(callback.from_user.id)
    
    if success:
        await callback.message.edit_text(
            "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
            "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /subscription"
        )
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏")

# ============ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ö–ï ============
@router.callback_query(F.data == "subscription_info")
async def show_subscription_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    text = "üíé **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
    
    text += "**üçΩ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è**\n"
    text += "‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏\n"
    text += "‚Ä¢ –£—á–∏—Ç—ã–≤–∞—é—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∞–ª–ª–µ—Ä–≥–∏–∏\n"
    text += "‚Ä¢ –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n\n"
    
    text += "**ü§ñ AI-–∫–æ—É—á**\n"
    text += "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ –µ–¥—ã\n"
    text += "‚Ä¢ –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n"
    text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
    
    text += "**üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**\n"
    text += "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
    text += "‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π\n"
    text += "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n\n"
    
    text += "**üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏**\n"
    text += "‚Ä¢ Google Fit\n"
    text += "‚Ä¢ Apple Health (—Å–∫–æ—Ä–æ)\n"
    text += "‚Ä¢ Fitbit (—Å–∫–æ—Ä–æ)\n\n"
    
    text += "**üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**\n"
    text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
    text += "‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
    text += "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω", callback_data="show_plans")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    await subscription_menu(callback.message)

# ============ –°–ú–ï–ù–ê –í–ê–õ–Æ–¢–´ ============
@router.callback_query(F.data == "change_currency")
async def change_currency(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    await callback.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üá∑üá∫ RUB (‚ÇΩ)", callback_data="currency_RUB"),
            InlineKeyboardButton(text="üá∫üá∏ USD ($)", callback_data="currency_USD")
        ],
        [
            InlineKeyboardButton(text="üá™üá∫ EUR (‚Ç¨)", callback_data="currency_EUR"),
            InlineKeyboardButton(text="üá∞üáø KZT (‚Ç∏)", callback_data="currency_KZT")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="show_plans")
        ]
    ])
    
    await callback.message.edit_text(
        "üí± **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É**\n\n"
        "–¶–µ–Ω—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("currency_"))
async def set_currency(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    currency = callback.data.replace("currency_", "")
    await state.update_data(currency=currency)
    await callback.answer(f"–í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency}")
    await show_subscription_plans(callback, state)

# ============ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–¢–ù–ï–†–ê ============
@router.callback_query(F.data == "partner_stats")
async def show_partner_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await callback.answer()
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞**\n\n"
    text += "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞: 0\n"
    text += "–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0‚ÇΩ\n"
    text += "–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: 0‚ÇΩ\n\n"
    text += "_–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —á–∞—Å_"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="partner_program")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "partner_withdraw")
async def partner_withdraw(callback: CallbackQuery):
    """–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"""
    await callback.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)