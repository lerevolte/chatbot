from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from datetime import datetime, timedelta
from sqlalchemy import select
import json

from database.models import User, MealPlan, Goal
from database.connection import get_session
from bot.services.meal_generator import MealPlanGenerator  # –ù–û–í–´–ô –°–ï–†–í–ò–°
from bot.keyboards.meal import get_meal_keyboard, get_day_keyboard  # –ù–û–í–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´

router = Router()

@router.message(Command("meal_plan"))
async def show_meal_plan(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user or not user.onboarding_completed:
            await message.answer(
                "‚ùå –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            return
        
        # ========== –ù–û–í–´–ô –ö–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞–Ω–∞ ==========
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–ª–∞–Ω –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        current_week = datetime.utcnow().isocalendar()[1]
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == current_week,
                MealPlan.is_active == True
            ).order_by(MealPlan.day_number)
        )
        meal_plans = result.scalars().all()
        
        if not meal_plans:
            # ========== –ù–û–í–´–ô –ö–û–î: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ AI ==========
            await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...")
            
            generator = MealPlanGenerator()
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
                weekly_plan = await generator.generate_weekly_plan(user)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                for day_num, day_plan in enumerate(weekly_plan, 1):
                    meal_plan = MealPlan(
                        user_id=user.id,
                        week_number=current_week,
                        day_number=day_num,
                        breakfast=day_plan['breakfast'],
                        lunch=day_plan['lunch'],
                        dinner=day_plan['dinner'],
                        snack=day_plan.get('snack'),
                        total_calories=day_plan['total_calories'],
                        total_protein=day_plan['total_protein'],
                        total_fats=day_plan['total_fats'],
                        total_carbs=day_plan['total_carbs']
                    )
                    session.add(meal_plan)
                
                await session.commit()
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω—ã
                result = await session.execute(
                    select(MealPlan).where(
                        MealPlan.user_id == user.id,
                        MealPlan.week_number == current_week,
                        MealPlan.is_active == True
                    ).order_by(MealPlan.day_number)
                )
                meal_plans = result.scalars().all()
                
            except Exception as e:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                    f"–î–µ—Ç–∞–ª–∏: {str(e)}"
                )
                return
        
        # ========== –ù–û–í–´–ô –ö–û–î: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π ==========
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.utcnow().weekday() + 1  # 1-7
        today_plan = next((p for p in meal_plans if p.day_number == today), meal_plans[0])
        
        await send_day_plan(message, today_plan, user)

async def send_day_plan(message_or_query, meal_plan: MealPlan, user: User):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å"""
    # ========== –ù–û–í–´–ô –ö–û–î: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–Ω—è ==========
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_name = days[meal_plan.day_number - 1]
    
    text = f"üìÖ **{day_name}**\n"
    text += f"üìä –í—Å–µ–≥–æ: {meal_plan.total_calories} –∫–∫–∞–ª | "
    text += f"–ë: {meal_plan.total_protein}–≥ | "
    text += f"–ñ: {meal_plan.total_fats}–≥ | "
    text += f"–£: {meal_plan.total_carbs}–≥\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞–∫
    text += "üåÖ **–ó–∞–≤—Ç—Ä–∞–∫**\n"
    text += f"{meal_plan.breakfast['name']}\n"
    text += f"‚îú –ö–∞–ª–æ—Ä–∏–∏: {meal_plan.breakfast['calories']} –∫–∫–∞–ª\n"
    text += f"‚îú –ë–ñ–£: {meal_plan.breakfast['protein']}–≥/{meal_plan.breakfast['fats']}–≥/{meal_plan.breakfast['carbs']}–≥\n"
    if meal_plan.breakfast.get('ingredients'):
        text += f"‚îî –°–æ—Å—Ç–∞–≤: {', '.join(meal_plan.breakfast['ingredients'])}\n"
    text += "\n"
    
    # –û–±–µ–¥
    text += "‚òÄÔ∏è **–û–±–µ–¥**\n"
    text += f"{meal_plan.lunch['name']}\n"
    text += f"‚îú –ö–∞–ª–æ—Ä–∏–∏: {meal_plan.lunch['calories']} –∫–∫–∞–ª\n"
    text += f"‚îú –ë–ñ–£: {meal_plan.lunch['protein']}–≥/{meal_plan.lunch['fats']}–≥/{meal_plan.lunch['carbs']}–≥\n"
    if meal_plan.lunch.get('ingredients'):
        text += f"‚îî –°–æ—Å—Ç–∞–≤: {', '.join(meal_plan.lunch['ingredients'])}\n"
    text += "\n"
    
    # –£–∂–∏–Ω
    text += "üåô **–£–∂–∏–Ω**\n"
    text += f"{meal_plan.dinner['name']}\n"
    text += f"‚îú –ö–∞–ª–æ—Ä–∏–∏: {meal_plan.dinner['calories']} –∫–∫–∞–ª\n"
    text += f"‚îú –ë–ñ–£: {meal_plan.dinner['protein']}–≥/{meal_plan.dinner['fats']}–≥/{meal_plan.dinner['carbs']}–≥\n"
    if meal_plan.dinner.get('ingredients'):
        text += f"‚îî –°–æ—Å—Ç–∞–≤: {', '.join(meal_plan.dinner['ingredients'])}\n"
    
    # –ü–µ—Ä–µ–∫—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if meal_plan.snack:
        text += "\nüçé **–ü–µ—Ä–µ–∫—É—Å**\n"
        text += f"{meal_plan.snack['name']}\n"
        text += f"‚îî {meal_plan.snack['calories']} –∫–∫–∞–ª\n"
    
    # ========== –ù–û–í–´–ô –ö–û–î: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ==========
    keyboard = get_day_keyboard(meal_plan.day_number, meal_plan.week_number)
    
    if isinstance(message_or_query, CallbackQuery):
        await message_or_query.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message_or_query.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# ========== –ù–û–í–´–ô –ö–û–î: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ==========
@router.callback_query(F.data.startswith("day_"))
async def navigate_days(callback: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
    _, day_num, week_num = callback.data.split("_")
    day_num = int(day_num)
    week_num = int(week_num)
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == week_num,
                MealPlan.day_number == day_num,
                MealPlan.is_active == True
            )
        )
        meal_plan = result.scalar_one_or_none()
        
        if meal_plan:
            await send_day_plan(callback, meal_plan, user)
        else:
            await callback.answer("–ü–ª–∞–Ω –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

# ========== –ù–û–í–´–ô –ö–û–î: –ó–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ ==========
@router.callback_query(F.data.startswith("replace_"))
async def replace_meal(callback: CallbackQuery):
    """–ó–∞–º–µ–Ω–∞ –±–ª—é–¥–∞ –≤ –ø–ª–∞–Ω–µ"""
    _, meal_type, day_num, week_num = callback.data.split("_")
    
    await callback.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É...")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–ª–∞–Ω
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == int(week_num),
                MealPlan.day_number == int(day_num)
            )
        )
        meal_plan = result.scalar_one_or_none()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É —á–µ—Ä–µ–∑ AI
        generator = MealPlanGenerator()
        new_meal = await generator.generate_meal_replacement(
            user, meal_type, meal_plan
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
        if meal_type == "breakfast":
            meal_plan.breakfast = new_meal
        elif meal_type == "lunch":
            meal_plan.lunch = new_meal
        elif meal_type == "dinner":
            meal_plan.dinner = new_meal
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        meal_plan.total_calories = (
            meal_plan.breakfast['calories'] + 
            meal_plan.lunch['calories'] + 
            meal_plan.dinner['calories'] +
            (meal_plan.snack['calories'] if meal_plan.snack else 0)
        )
        
        await session.commit()
        await send_day_plan(callback, meal_plan, user)

# ========== –ù–û–í–´–ô –ö–û–î: –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ ==========
@router.callback_query(F.data == "shopping_list")
async def show_shopping_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    await callback.answer()
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
        current_week = datetime.utcnow().isocalendar()[1]
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == current_week,
                MealPlan.is_active == True
            )
        )
        meal_plans = result.scalars().all()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        shopping_list = {}
        for plan in meal_plans:
            for meal in [plan.breakfast, plan.lunch, plan.dinner]:
                if meal and meal.get('ingredients'):
                    for ingredient in meal['ingredients']:
                        # –ü–∞—Ä—Å–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
                        parts = ingredient.split(' - ')
                        name = parts[0]
                        amount = parts[1] if len(parts) > 1 else "–ø–æ –≤–∫—É—Å—É"
                        
                        if name in shopping_list:
                            shopping_list[name].append(amount)
                        else:
                            shopping_list[name] = [amount]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        text = "üõí **–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é**\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        categories = {
            "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞": ["–∫—É—Ä–∏—Ü–∞", "–≥–æ–≤—è–¥–∏–Ω–∞", "—Å–≤–∏–Ω–∏–Ω–∞", "–∏–Ω–¥–µ–π–∫–∞", "—Ä—ã–±–∞"],
            "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": ["–º–æ–ª–æ–∫–æ", "—Ç–≤–æ—Ä–æ–≥", "—Å—ã—Ä", "–π–æ–≥—É—Ä—Ç", "–∫–µ—Ñ–∏—Ä"],
            "–û–≤–æ—â–∏": ["–ø–æ–º–∏–¥–æ—Ä", "–æ–≥—É—Ä–µ—Ü", "–∫–∞–ø—É—Å—Ç–∞", "–º–æ—Ä–∫–æ–≤—å", "–ª—É–∫", "–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å"],
            "–§—Ä—É–∫—Ç—ã": ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–∞–ø–µ–ª—å—Å–∏–Ω", "–≥—Ä—É—à–∞"],
            "–ö—Ä—É–ø—ã": ["—Ä–∏—Å", "–≥—Ä–µ—á–∫–∞", "–æ–≤—Å—è–Ω–∫–∞", "–º–∞–∫–∞—Ä–æ–Ω—ã"],
            "–î—Ä—É–≥–æ–µ": []
        }
        
        categorized = {cat: {} for cat in categories}
        
        for item, amounts in shopping_list.items():
            placed = False
            for category, keywords in categories.items():
                if any(kw in item.lower() for kw in keywords):
                    categorized[category][item] = amounts
                    placed = True
                    break
            if not placed:
                categorized["–î—Ä—É–≥–æ–µ"][item] = amounts
        
        for category, items in categorized.items():
            if items:
                text += f"**{category}:**\n"
                for item, amounts in items.items():
                    text += f"‚Ä¢ {item}: {', '.join(set(amounts))}\n"
                text += "\n"
        
        # ========== –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê –≠–ö–°–ü–û–†–¢–ê –í PDF ==========
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –°–∫–∞—á–∞—Ç—å PDF", callback_data="export_shopping_pdf"),
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_plan")
            ]
        ])
        
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

# ========== –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –≠–ö–°–ü–û–†–¢ –í PDF ==========
@router.callback_query(F.data == "export_shopping_pdf")
async def export_shopping_pdf(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –≤ PDF"""
    await callback.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
        current_week = datetime.utcnow().isocalendar()[1]
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == current_week,
                MealPlan.is_active == True
            )
        )
        meal_plans = result.scalars().all()
        
        if not meal_plans:
            await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_generator = PDFGenerator()
        try:
            pdf_path = await pdf_generator.generate_shopping_list_pdf(user, meal_plans)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            pdf_file = FSInputFile(pdf_path, filename=f"shopping_list_{current_week}.pdf")
            await callback.message.answer_document(
                pdf_file,
                caption="üìÑ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n"
                       "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω!"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(pdf_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

# ========== –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –≠–ö–°–ü–û–†–¢ –ü–õ–ê–ù–ê –í PDF ==========
@router.callback_query(F.data == "export_plan_pdf")
async def export_plan_pdf(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –≤ PDF"""
    await callback.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF —Å –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è...")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
        current_week = datetime.utcnow().isocalendar()[1]
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == current_week,
                MealPlan.is_active == True
            ).order_by(MealPlan.day_number)
        )
        meal_plans = result.scalars().all()
        
        if not meal_plans:
            await callback.message.answer("‚ùå –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_generator = PDFGenerator()
        try:
            pdf_path = await pdf_generator.generate_meal_plan_pdf(user, meal_plans)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            pdf_file = FSInputFile(pdf_path, filename=f"meal_plan_week_{current_week}.pdf")
            await callback.message.answer_document(
                pdf_file,
                caption="üìÑ –í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n"
                       "‚úÖ –í—Å–µ –±–ª—é–¥–∞ —Å –∫–∞–ª–æ—Ä–∏—è–º–∏ –∏ –ë–ñ–£\n"
                       "‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –∫–æ–Ω—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                       "‚úÖ –ú–æ–∂–µ—Ç–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(pdf_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

# ========== –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–õ–ê–ù–ê –ß–ï–†–ï–ó AI ==========
@router.callback_query(F.data == "regenerate_plan")
async def regenerate_plan(callback: CallbackQuery):
    """–ü–æ–ª–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    await callback.answer()
    
    confirmation_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="confirm_regenerate"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_regenerate")
        ]
    ])
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω?\n\n"
        "–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω –Ω–æ–≤—ã–º.",
        reply_markup=confirmation_keyboard
    )

@router.callback_query(F.data == "confirm_regenerate")
async def confirm_regenerate(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞"""
    await callback.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω...")
    await callback.message.edit_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω
        current_week = datetime.utcnow().isocalendar()[1]
        result = await session.execute(
            select(MealPlan).where(
                MealPlan.user_id == user.id,
                MealPlan.week_number == current_week
            )
        )
        old_plans = result.scalars().all()
        for plan in old_plans:
            plan.is_active = False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
        generator = MealPlanGenerator()
        try:
            weekly_plan = await generator.generate_weekly_plan(user)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            for day_num, day_plan in enumerate(weekly_plan, 1):
                meal_plan = MealPlan(
                    user_id=user.id,
                    week_number=current_week,
                    day_number=day_num,
                    breakfast=day_plan['breakfast'],
                    lunch=day_plan['lunch'],
                    dinner=day_plan['dinner'],
                    snack=day_plan.get('snack'),
                    total_calories=day_plan['total_calories'],
                    total_protein=day_plan['total_protein'],
                    total_fats=day_plan['total_fats'],
                    total_carbs=day_plan['total_carbs']
                )
                session.add(meal_plan)
            
            await session.commit()
            
            await callback.message.edit_text(
                "‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /meal_plan –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

@router.callback_query(F.data == "cancel_regenerate")
async def cancel_regenerate(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω.")

# ========== –î–û–ë–ê–í–õ–Ø–ï–ú –õ–û–ì–ì–ï–† ==========
import logging
logger = logging.getLogger(__name__)